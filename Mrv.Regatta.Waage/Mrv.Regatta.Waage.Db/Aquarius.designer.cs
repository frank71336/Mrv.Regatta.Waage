#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mrv.Regatta.Waage.Db
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Rudern")]
	public partial class AquariusDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgeClass(AgeClass instance);
    partial void UpdateAgeClass(AgeClass instance);
    partial void DeleteAgeClass(AgeClass instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertAthlet(Athlet instance);
    partial void UpdateAthlet(Athlet instance);
    partial void DeleteAthlet(Athlet instance);
    partial void InsertBoatClass(BoatClass instance);
    partial void UpdateBoatClass(BoatClass instance);
    partial void DeleteBoatClass(BoatClass instance);
    partial void InsertClub(Club instance);
    partial void UpdateClub(Club instance);
    partial void DeleteClub(Club instance);
    partial void InsertComp(Comp instance);
    partial void UpdateComp(Comp instance);
    partial void DeleteComp(Comp instance);
    partial void InsertCompEntry(CompEntry instance);
    partial void UpdateCompEntry(CompEntry instance);
    partial void DeleteCompEntry(CompEntry instance);
    partial void InsertCompReferee(CompReferee instance);
    partial void UpdateCompReferee(CompReferee instance);
    partial void DeleteCompReferee(CompReferee instance);
    partial void InsertCrew(Crew instance);
    partial void UpdateCrew(Crew instance);
    partial void DeleteCrew(Crew instance);
    partial void InsertCup(Cup instance);
    partial void UpdateCup(Cup instance);
    partial void DeleteCup(Cup instance);
    partial void InsertCupPointTable(CupPointTable instance);
    partial void UpdateCupPointTable(CupPointTable instance);
    partial void DeleteCupPointTable(CupPointTable instance);
    partial void InsertEntry(Entry instance);
    partial void UpdateEntry(Entry instance);
    partial void DeleteEntry(Entry instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventReferee(EventReferee instance);
    partial void UpdateEventReferee(EventReferee instance);
    partial void DeleteEventReferee(EventReferee instance);
    partial void InsertMetaData(MetaData instance);
    partial void UpdateMetaData(MetaData instance);
    partial void DeleteMetaData(MetaData instance);
    partial void InsertNation(Nation instance);
    partial void UpdateNation(Nation instance);
    partial void DeleteNation(Nation instance);
    partial void InsertOffer(Offer instance);
    partial void UpdateOffer(Offer instance);
    partial void DeleteOffer(Offer instance);
    partial void InsertRaceMode(RaceMode instance);
    partial void UpdateRaceMode(RaceMode instance);
    partial void DeleteRaceMode(RaceMode instance);
    partial void InsertRaceMode_Detail(RaceMode_Detail instance);
    partial void UpdateRaceMode_Detail(RaceMode_Detail instance);
    partial void DeleteRaceMode_Detail(RaceMode_Detail instance);
    partial void InsertRaceMode_Range(RaceMode_Range instance);
    partial void UpdateRaceMode_Range(RaceMode_Range instance);
    partial void DeleteRaceMode_Range(RaceMode_Range instance);
    partial void InsertReferee(Referee instance);
    partial void UpdateReferee(Referee instance);
    partial void DeleteReferee(Referee instance);
    partial void InsertReportInfo(ReportInfo instance);
    partial void UpdateReportInfo(ReportInfo instance);
    partial void DeleteReportInfo(ReportInfo instance);
    #endregion
		
		public AquariusDataContext() : 
				base(global::Mrv.Regatta.Waage.Db.Properties.Settings.Default.RudernConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AquariusDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AquariusDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AquariusDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AquariusDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AgeClass> AgeClasses
		{
			get
			{
				return this.GetTable<AgeClass>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<Athlet> Athlets
		{
			get
			{
				return this.GetTable<Athlet>();
			}
		}
		
		public System.Data.Linq.Table<BoatClass> BoatClasses
		{
			get
			{
				return this.GetTable<BoatClass>();
			}
		}
		
		public System.Data.Linq.Table<Club> Clubs
		{
			get
			{
				return this.GetTable<Club>();
			}
		}
		
		public System.Data.Linq.Table<Comp> Comps
		{
			get
			{
				return this.GetTable<Comp>();
			}
		}
		
		public System.Data.Linq.Table<CompEntry> CompEntries
		{
			get
			{
				return this.GetTable<CompEntry>();
			}
		}
		
		public System.Data.Linq.Table<CompReferee> CompReferees
		{
			get
			{
				return this.GetTable<CompReferee>();
			}
		}
		
		public System.Data.Linq.Table<Crew> Crews
		{
			get
			{
				return this.GetTable<Crew>();
			}
		}
		
		public System.Data.Linq.Table<Cup> Cups
		{
			get
			{
				return this.GetTable<Cup>();
			}
		}
		
		public System.Data.Linq.Table<CupPointTable> CupPointTables
		{
			get
			{
				return this.GetTable<CupPointTable>();
			}
		}
		
		public System.Data.Linq.Table<Entry> Entries
		{
			get
			{
				return this.GetTable<Entry>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventReferee> EventReferees
		{
			get
			{
				return this.GetTable<EventReferee>();
			}
		}
		
		public System.Data.Linq.Table<MetaData> MetaDatas
		{
			get
			{
				return this.GetTable<MetaData>();
			}
		}
		
		public System.Data.Linq.Table<Nation> Nations
		{
			get
			{
				return this.GetTable<Nation>();
			}
		}
		
		public System.Data.Linq.Table<Offer> Offers
		{
			get
			{
				return this.GetTable<Offer>();
			}
		}
		
		public System.Data.Linq.Table<RaceMode> RaceModes
		{
			get
			{
				return this.GetTable<RaceMode>();
			}
		}
		
		public System.Data.Linq.Table<RaceMode_Detail> RaceMode_Details
		{
			get
			{
				return this.GetTable<RaceMode_Detail>();
			}
		}
		
		public System.Data.Linq.Table<RaceMode_Range> RaceMode_Ranges
		{
			get
			{
				return this.GetTable<RaceMode_Range>();
			}
		}
		
		public System.Data.Linq.Table<Referee> Referees
		{
			get
			{
				return this.GetTable<Referee>();
			}
		}
		
		public System.Data.Linq.Table<ReportInfo> ReportInfos
		{
			get
			{
				return this.GetTable<ReportInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AgeClass")]
	public partial class AgeClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AgeClass_ID;
		
		private string _AgeClass_Caption;
		
		private string _AgeClass_Abbr;
		
		private string _AgeClass_Suffix;
		
		private string _AgeClass_AbbrSuffix;
		
		private char _AgeClass_Gender;
		
		private byte _AgeClass_MinAge;
		
		private byte _AgeClass_MaxAge;
		
		private byte _AgeClass_AllowYounger;
		
		private byte _AgeClass_NumSubClasses;
		
		private System.Nullable<int> _AgeClass_LW_UpperLimit;
		
		private System.Nullable<int> _AgeClass_LW_AvgLimit;
		
		private System.Nullable<int> _AgeClass_LW_CoxLowerLimit;
		
		private System.Nullable<int> _AgeClass_LW_CoxTolerance;
		
		private EntitySet<Offer> _Offers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgeClass_IDChanging(int value);
    partial void OnAgeClass_IDChanged();
    partial void OnAgeClass_CaptionChanging(string value);
    partial void OnAgeClass_CaptionChanged();
    partial void OnAgeClass_AbbrChanging(string value);
    partial void OnAgeClass_AbbrChanged();
    partial void OnAgeClass_SuffixChanging(string value);
    partial void OnAgeClass_SuffixChanged();
    partial void OnAgeClass_AbbrSuffixChanging(string value);
    partial void OnAgeClass_AbbrSuffixChanged();
    partial void OnAgeClass_GenderChanging(char value);
    partial void OnAgeClass_GenderChanged();
    partial void OnAgeClass_MinAgeChanging(byte value);
    partial void OnAgeClass_MinAgeChanged();
    partial void OnAgeClass_MaxAgeChanging(byte value);
    partial void OnAgeClass_MaxAgeChanged();
    partial void OnAgeClass_AllowYoungerChanging(byte value);
    partial void OnAgeClass_AllowYoungerChanged();
    partial void OnAgeClass_NumSubClassesChanging(byte value);
    partial void OnAgeClass_NumSubClassesChanged();
    partial void OnAgeClass_LW_UpperLimitChanging(System.Nullable<int> value);
    partial void OnAgeClass_LW_UpperLimitChanged();
    partial void OnAgeClass_LW_AvgLimitChanging(System.Nullable<int> value);
    partial void OnAgeClass_LW_AvgLimitChanged();
    partial void OnAgeClass_LW_CoxLowerLimitChanging(System.Nullable<int> value);
    partial void OnAgeClass_LW_CoxLowerLimitChanged();
    partial void OnAgeClass_LW_CoxToleranceChanging(System.Nullable<int> value);
    partial void OnAgeClass_LW_CoxToleranceChanged();
    #endregion
		
		public AgeClass()
		{
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AgeClass_ID
		{
			get
			{
				return this._AgeClass_ID;
			}
			set
			{
				if ((this._AgeClass_ID != value))
				{
					this.OnAgeClass_IDChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_ID = value;
					this.SendPropertyChanged("AgeClass_ID");
					this.OnAgeClass_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_Caption", DbType="VarChar(48) NOT NULL", CanBeNull=false)]
		public string AgeClass_Caption
		{
			get
			{
				return this._AgeClass_Caption;
			}
			set
			{
				if ((this._AgeClass_Caption != value))
				{
					this.OnAgeClass_CaptionChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_Caption = value;
					this.SendPropertyChanged("AgeClass_Caption");
					this.OnAgeClass_CaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_Abbr", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string AgeClass_Abbr
		{
			get
			{
				return this._AgeClass_Abbr;
			}
			set
			{
				if ((this._AgeClass_Abbr != value))
				{
					this.OnAgeClass_AbbrChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_Abbr = value;
					this.SendPropertyChanged("AgeClass_Abbr");
					this.OnAgeClass_AbbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_Suffix", DbType="VarChar(16)")]
		public string AgeClass_Suffix
		{
			get
			{
				return this._AgeClass_Suffix;
			}
			set
			{
				if ((this._AgeClass_Suffix != value))
				{
					this.OnAgeClass_SuffixChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_Suffix = value;
					this.SendPropertyChanged("AgeClass_Suffix");
					this.OnAgeClass_SuffixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_AbbrSuffix", DbType="VarChar(8)")]
		public string AgeClass_AbbrSuffix
		{
			get
			{
				return this._AgeClass_AbbrSuffix;
			}
			set
			{
				if ((this._AgeClass_AbbrSuffix != value))
				{
					this.OnAgeClass_AbbrSuffixChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_AbbrSuffix = value;
					this.SendPropertyChanged("AgeClass_AbbrSuffix");
					this.OnAgeClass_AbbrSuffixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_Gender", DbType="Char(1) NOT NULL")]
		public char AgeClass_Gender
		{
			get
			{
				return this._AgeClass_Gender;
			}
			set
			{
				if ((this._AgeClass_Gender != value))
				{
					this.OnAgeClass_GenderChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_Gender = value;
					this.SendPropertyChanged("AgeClass_Gender");
					this.OnAgeClass_GenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_MinAge", DbType="TinyInt NOT NULL")]
		public byte AgeClass_MinAge
		{
			get
			{
				return this._AgeClass_MinAge;
			}
			set
			{
				if ((this._AgeClass_MinAge != value))
				{
					this.OnAgeClass_MinAgeChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_MinAge = value;
					this.SendPropertyChanged("AgeClass_MinAge");
					this.OnAgeClass_MinAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_MaxAge", DbType="TinyInt NOT NULL")]
		public byte AgeClass_MaxAge
		{
			get
			{
				return this._AgeClass_MaxAge;
			}
			set
			{
				if ((this._AgeClass_MaxAge != value))
				{
					this.OnAgeClass_MaxAgeChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_MaxAge = value;
					this.SendPropertyChanged("AgeClass_MaxAge");
					this.OnAgeClass_MaxAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_AllowYounger", DbType="TinyInt NOT NULL")]
		public byte AgeClass_AllowYounger
		{
			get
			{
				return this._AgeClass_AllowYounger;
			}
			set
			{
				if ((this._AgeClass_AllowYounger != value))
				{
					this.OnAgeClass_AllowYoungerChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_AllowYounger = value;
					this.SendPropertyChanged("AgeClass_AllowYounger");
					this.OnAgeClass_AllowYoungerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_NumSubClasses", DbType="TinyInt NOT NULL")]
		public byte AgeClass_NumSubClasses
		{
			get
			{
				return this._AgeClass_NumSubClasses;
			}
			set
			{
				if ((this._AgeClass_NumSubClasses != value))
				{
					this.OnAgeClass_NumSubClassesChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_NumSubClasses = value;
					this.SendPropertyChanged("AgeClass_NumSubClasses");
					this.OnAgeClass_NumSubClassesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_LW_UpperLimit", DbType="Int")]
		public System.Nullable<int> AgeClass_LW_UpperLimit
		{
			get
			{
				return this._AgeClass_LW_UpperLimit;
			}
			set
			{
				if ((this._AgeClass_LW_UpperLimit != value))
				{
					this.OnAgeClass_LW_UpperLimitChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_LW_UpperLimit = value;
					this.SendPropertyChanged("AgeClass_LW_UpperLimit");
					this.OnAgeClass_LW_UpperLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_LW_AvgLimit", DbType="Int")]
		public System.Nullable<int> AgeClass_LW_AvgLimit
		{
			get
			{
				return this._AgeClass_LW_AvgLimit;
			}
			set
			{
				if ((this._AgeClass_LW_AvgLimit != value))
				{
					this.OnAgeClass_LW_AvgLimitChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_LW_AvgLimit = value;
					this.SendPropertyChanged("AgeClass_LW_AvgLimit");
					this.OnAgeClass_LW_AvgLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_LW_CoxLowerLimit", DbType="Int")]
		public System.Nullable<int> AgeClass_LW_CoxLowerLimit
		{
			get
			{
				return this._AgeClass_LW_CoxLowerLimit;
			}
			set
			{
				if ((this._AgeClass_LW_CoxLowerLimit != value))
				{
					this.OnAgeClass_LW_CoxLowerLimitChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_LW_CoxLowerLimit = value;
					this.SendPropertyChanged("AgeClass_LW_CoxLowerLimit");
					this.OnAgeClass_LW_CoxLowerLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeClass_LW_CoxTolerance", DbType="Int")]
		public System.Nullable<int> AgeClass_LW_CoxTolerance
		{
			get
			{
				return this._AgeClass_LW_CoxTolerance;
			}
			set
			{
				if ((this._AgeClass_LW_CoxTolerance != value))
				{
					this.OnAgeClass_LW_CoxToleranceChanging(value);
					this.SendPropertyChanging();
					this._AgeClass_LW_CoxTolerance = value;
					this.SendPropertyChanged("AgeClass_LW_CoxTolerance");
					this.OnAgeClass_LW_CoxToleranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgeClass_Offer", Storage="_Offers", ThisKey="AgeClass_ID", OtherKey="Offer_AgeClass_ID_FK")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.AgeClass = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.AgeClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Result")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Result_CE_ID_FK;
		
		private byte _Result_SplitNr;
		
		private System.Nullable<int> _Result_DayTime;
		
		private System.Nullable<int> _Result_NetTime;
		
		private System.Nullable<int> _Result_Delta;
		
		private System.Nullable<byte> _Result_Rank;
		
		private System.Nullable<int> _Result_SortValue;
		
		private string _Result_DisplayValue;
		
		private string _Result_Params;
		
		private char _Result_ResultType;
		
		private char _Result_DisplayType;
		
		private string _Result_Comment;
		
		private EntityRef<CompEntry> _CompEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResult_CE_ID_FKChanging(int value);
    partial void OnResult_CE_ID_FKChanged();
    partial void OnResult_SplitNrChanging(byte value);
    partial void OnResult_SplitNrChanged();
    partial void OnResult_DayTimeChanging(System.Nullable<int> value);
    partial void OnResult_DayTimeChanged();
    partial void OnResult_NetTimeChanging(System.Nullable<int> value);
    partial void OnResult_NetTimeChanged();
    partial void OnResult_DeltaChanging(System.Nullable<int> value);
    partial void OnResult_DeltaChanged();
    partial void OnResult_RankChanging(System.Nullable<byte> value);
    partial void OnResult_RankChanged();
    partial void OnResult_SortValueChanging(System.Nullable<int> value);
    partial void OnResult_SortValueChanged();
    partial void OnResult_DisplayValueChanging(string value);
    partial void OnResult_DisplayValueChanged();
    partial void OnResult_ParamsChanging(string value);
    partial void OnResult_ParamsChanged();
    partial void OnResult_ResultTypeChanging(char value);
    partial void OnResult_ResultTypeChanged();
    partial void OnResult_DisplayTypeChanging(char value);
    partial void OnResult_DisplayTypeChanged();
    partial void OnResult_CommentChanging(string value);
    partial void OnResult_CommentChanged();
    #endregion
		
		public Result()
		{
			this._CompEntry = default(EntityRef<CompEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_CE_ID_FK", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Result_CE_ID_FK
		{
			get
			{
				return this._Result_CE_ID_FK;
			}
			set
			{
				if ((this._Result_CE_ID_FK != value))
				{
					if (this._CompEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResult_CE_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Result_CE_ID_FK = value;
					this.SendPropertyChanged("Result_CE_ID_FK");
					this.OnResult_CE_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_SplitNr", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Result_SplitNr
		{
			get
			{
				return this._Result_SplitNr;
			}
			set
			{
				if ((this._Result_SplitNr != value))
				{
					this.OnResult_SplitNrChanging(value);
					this.SendPropertyChanging();
					this._Result_SplitNr = value;
					this.SendPropertyChanged("Result_SplitNr");
					this.OnResult_SplitNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_DayTime", DbType="Int")]
		public System.Nullable<int> Result_DayTime
		{
			get
			{
				return this._Result_DayTime;
			}
			set
			{
				if ((this._Result_DayTime != value))
				{
					this.OnResult_DayTimeChanging(value);
					this.SendPropertyChanging();
					this._Result_DayTime = value;
					this.SendPropertyChanged("Result_DayTime");
					this.OnResult_DayTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_NetTime", DbType="Int")]
		public System.Nullable<int> Result_NetTime
		{
			get
			{
				return this._Result_NetTime;
			}
			set
			{
				if ((this._Result_NetTime != value))
				{
					this.OnResult_NetTimeChanging(value);
					this.SendPropertyChanging();
					this._Result_NetTime = value;
					this.SendPropertyChanged("Result_NetTime");
					this.OnResult_NetTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_Delta", DbType="Int")]
		public System.Nullable<int> Result_Delta
		{
			get
			{
				return this._Result_Delta;
			}
			set
			{
				if ((this._Result_Delta != value))
				{
					this.OnResult_DeltaChanging(value);
					this.SendPropertyChanging();
					this._Result_Delta = value;
					this.SendPropertyChanged("Result_Delta");
					this.OnResult_DeltaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_Rank", DbType="TinyInt")]
		public System.Nullable<byte> Result_Rank
		{
			get
			{
				return this._Result_Rank;
			}
			set
			{
				if ((this._Result_Rank != value))
				{
					this.OnResult_RankChanging(value);
					this.SendPropertyChanging();
					this._Result_Rank = value;
					this.SendPropertyChanged("Result_Rank");
					this.OnResult_RankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_SortValue", DbType="Int")]
		public System.Nullable<int> Result_SortValue
		{
			get
			{
				return this._Result_SortValue;
			}
			set
			{
				if ((this._Result_SortValue != value))
				{
					this.OnResult_SortValueChanging(value);
					this.SendPropertyChanging();
					this._Result_SortValue = value;
					this.SendPropertyChanged("Result_SortValue");
					this.OnResult_SortValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_DisplayValue", DbType="VarChar(64)")]
		public string Result_DisplayValue
		{
			get
			{
				return this._Result_DisplayValue;
			}
			set
			{
				if ((this._Result_DisplayValue != value))
				{
					this.OnResult_DisplayValueChanging(value);
					this.SendPropertyChanging();
					this._Result_DisplayValue = value;
					this.SendPropertyChanged("Result_DisplayValue");
					this.OnResult_DisplayValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_Params", DbType="VarChar(64)")]
		public string Result_Params
		{
			get
			{
				return this._Result_Params;
			}
			set
			{
				if ((this._Result_Params != value))
				{
					this.OnResult_ParamsChanging(value);
					this.SendPropertyChanging();
					this._Result_Params = value;
					this.SendPropertyChanged("Result_Params");
					this.OnResult_ParamsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_ResultType", DbType="Char(1) NOT NULL")]
		public char Result_ResultType
		{
			get
			{
				return this._Result_ResultType;
			}
			set
			{
				if ((this._Result_ResultType != value))
				{
					this.OnResult_ResultTypeChanging(value);
					this.SendPropertyChanging();
					this._Result_ResultType = value;
					this.SendPropertyChanged("Result_ResultType");
					this.OnResult_ResultTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_DisplayType", DbType="Char(1) NOT NULL")]
		public char Result_DisplayType
		{
			get
			{
				return this._Result_DisplayType;
			}
			set
			{
				if ((this._Result_DisplayType != value))
				{
					this.OnResult_DisplayTypeChanging(value);
					this.SendPropertyChanging();
					this._Result_DisplayType = value;
					this.SendPropertyChanged("Result_DisplayType");
					this.OnResult_DisplayTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_Comment", DbType="VarChar(255)")]
		public string Result_Comment
		{
			get
			{
				return this._Result_Comment;
			}
			set
			{
				if ((this._Result_Comment != value))
				{
					this.OnResult_CommentChanging(value);
					this.SendPropertyChanging();
					this._Result_Comment = value;
					this.SendPropertyChanged("Result_Comment");
					this.OnResult_CommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompEntry_Result", Storage="_CompEntry", ThisKey="Result_CE_ID_FK", OtherKey="CE_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CompEntry CompEntry
		{
			get
			{
				return this._CompEntry.Entity;
			}
			set
			{
				CompEntry previousValue = this._CompEntry.Entity;
				if (((previousValue != value) 
							|| (this._CompEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompEntry.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._CompEntry.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._Result_CE_ID_FK = value.CE_ID;
					}
					else
					{
						this._Result_CE_ID_FK = default(int);
					}
					this.SendPropertyChanged("CompEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Athlet")]
	public partial class Athlet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Athlet_ID;
		
		private string _Athlet_FirstName;
		
		private string _Athlet_LastName;
		
		private char _Athlet_Gender;
		
		private System.DateTime _Athlet_DOB;
		
		private System.Nullable<int> _Athlet_Club_ID_FK;
		
		private System.Nullable<int> _Athlet_Nation_ID_FK;
		
		private byte _Athlet_State;
		
		private System.Nullable<byte> _Athlet_ExternState;
		
		private string _Athlet_ExternID_A;
		
		private string _Athlet_ExternID_B;
		
		private string _Athlet_SoundEx;
		
		private System.Nullable<byte> _Athlet_ExternState_B;
		
		private EntitySet<Crew> _Crews;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<Nation> _Nation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAthlet_IDChanging(int value);
    partial void OnAthlet_IDChanged();
    partial void OnAthlet_FirstNameChanging(string value);
    partial void OnAthlet_FirstNameChanged();
    partial void OnAthlet_LastNameChanging(string value);
    partial void OnAthlet_LastNameChanged();
    partial void OnAthlet_GenderChanging(char value);
    partial void OnAthlet_GenderChanged();
    partial void OnAthlet_DOBChanging(System.DateTime value);
    partial void OnAthlet_DOBChanged();
    partial void OnAthlet_Club_ID_FKChanging(System.Nullable<int> value);
    partial void OnAthlet_Club_ID_FKChanged();
    partial void OnAthlet_Nation_ID_FKChanging(System.Nullable<int> value);
    partial void OnAthlet_Nation_ID_FKChanged();
    partial void OnAthlet_StateChanging(byte value);
    partial void OnAthlet_StateChanged();
    partial void OnAthlet_ExternStateChanging(System.Nullable<byte> value);
    partial void OnAthlet_ExternStateChanged();
    partial void OnAthlet_ExternID_AChanging(string value);
    partial void OnAthlet_ExternID_AChanged();
    partial void OnAthlet_ExternID_BChanging(string value);
    partial void OnAthlet_ExternID_BChanged();
    partial void OnAthlet_SoundExChanging(string value);
    partial void OnAthlet_SoundExChanged();
    partial void OnAthlet_ExternState_BChanging(System.Nullable<byte> value);
    partial void OnAthlet_ExternState_BChanged();
    #endregion
		
		public Athlet()
		{
			this._Crews = new EntitySet<Crew>(new Action<Crew>(this.attach_Crews), new Action<Crew>(this.detach_Crews));
			this._Club = default(EntityRef<Club>);
			this._Nation = default(EntityRef<Nation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Athlet_ID
		{
			get
			{
				return this._Athlet_ID;
			}
			set
			{
				if ((this._Athlet_ID != value))
				{
					this.OnAthlet_IDChanging(value);
					this.SendPropertyChanging();
					this._Athlet_ID = value;
					this.SendPropertyChanged("Athlet_ID");
					this.OnAthlet_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_FirstName", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Athlet_FirstName
		{
			get
			{
				return this._Athlet_FirstName;
			}
			set
			{
				if ((this._Athlet_FirstName != value))
				{
					this.OnAthlet_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Athlet_FirstName = value;
					this.SendPropertyChanged("Athlet_FirstName");
					this.OnAthlet_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_LastName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Athlet_LastName
		{
			get
			{
				return this._Athlet_LastName;
			}
			set
			{
				if ((this._Athlet_LastName != value))
				{
					this.OnAthlet_LastNameChanging(value);
					this.SendPropertyChanging();
					this._Athlet_LastName = value;
					this.SendPropertyChanged("Athlet_LastName");
					this.OnAthlet_LastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_Gender", DbType="Char(1) NOT NULL")]
		public char Athlet_Gender
		{
			get
			{
				return this._Athlet_Gender;
			}
			set
			{
				if ((this._Athlet_Gender != value))
				{
					this.OnAthlet_GenderChanging(value);
					this.SendPropertyChanging();
					this._Athlet_Gender = value;
					this.SendPropertyChanged("Athlet_Gender");
					this.OnAthlet_GenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_DOB", DbType="DateTime NOT NULL")]
		public System.DateTime Athlet_DOB
		{
			get
			{
				return this._Athlet_DOB;
			}
			set
			{
				if ((this._Athlet_DOB != value))
				{
					this.OnAthlet_DOBChanging(value);
					this.SendPropertyChanging();
					this._Athlet_DOB = value;
					this.SendPropertyChanged("Athlet_DOB");
					this.OnAthlet_DOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_Club_ID_FK", DbType="Int")]
		public System.Nullable<int> Athlet_Club_ID_FK
		{
			get
			{
				return this._Athlet_Club_ID_FK;
			}
			set
			{
				if ((this._Athlet_Club_ID_FK != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthlet_Club_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Athlet_Club_ID_FK = value;
					this.SendPropertyChanged("Athlet_Club_ID_FK");
					this.OnAthlet_Club_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_Nation_ID_FK", DbType="Int")]
		public System.Nullable<int> Athlet_Nation_ID_FK
		{
			get
			{
				return this._Athlet_Nation_ID_FK;
			}
			set
			{
				if ((this._Athlet_Nation_ID_FK != value))
				{
					if (this._Nation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthlet_Nation_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Athlet_Nation_ID_FK = value;
					this.SendPropertyChanged("Athlet_Nation_ID_FK");
					this.OnAthlet_Nation_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_State", DbType="TinyInt NOT NULL")]
		public byte Athlet_State
		{
			get
			{
				return this._Athlet_State;
			}
			set
			{
				if ((this._Athlet_State != value))
				{
					this.OnAthlet_StateChanging(value);
					this.SendPropertyChanging();
					this._Athlet_State = value;
					this.SendPropertyChanged("Athlet_State");
					this.OnAthlet_StateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_ExternState", DbType="TinyInt")]
		public System.Nullable<byte> Athlet_ExternState
		{
			get
			{
				return this._Athlet_ExternState;
			}
			set
			{
				if ((this._Athlet_ExternState != value))
				{
					this.OnAthlet_ExternStateChanging(value);
					this.SendPropertyChanging();
					this._Athlet_ExternState = value;
					this.SendPropertyChanged("Athlet_ExternState");
					this.OnAthlet_ExternStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_ExternID_A", DbType="VarChar(11)")]
		public string Athlet_ExternID_A
		{
			get
			{
				return this._Athlet_ExternID_A;
			}
			set
			{
				if ((this._Athlet_ExternID_A != value))
				{
					this.OnAthlet_ExternID_AChanging(value);
					this.SendPropertyChanging();
					this._Athlet_ExternID_A = value;
					this.SendPropertyChanged("Athlet_ExternID_A");
					this.OnAthlet_ExternID_AChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_ExternID_B", DbType="VarChar(11)")]
		public string Athlet_ExternID_B
		{
			get
			{
				return this._Athlet_ExternID_B;
			}
			set
			{
				if ((this._Athlet_ExternID_B != value))
				{
					this.OnAthlet_ExternID_BChanging(value);
					this.SendPropertyChanging();
					this._Athlet_ExternID_B = value;
					this.SendPropertyChanged("Athlet_ExternID_B");
					this.OnAthlet_ExternID_BChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_SoundEx", AutoSync=AutoSync.Always, DbType="VarChar(5)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string Athlet_SoundEx
		{
			get
			{
				return this._Athlet_SoundEx;
			}
			set
			{
				if ((this._Athlet_SoundEx != value))
				{
					this.OnAthlet_SoundExChanging(value);
					this.SendPropertyChanging();
					this._Athlet_SoundEx = value;
					this.SendPropertyChanged("Athlet_SoundEx");
					this.OnAthlet_SoundExChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athlet_ExternState_B", DbType="TinyInt")]
		public System.Nullable<byte> Athlet_ExternState_B
		{
			get
			{
				return this._Athlet_ExternState_B;
			}
			set
			{
				if ((this._Athlet_ExternState_B != value))
				{
					this.OnAthlet_ExternState_BChanging(value);
					this.SendPropertyChanging();
					this._Athlet_ExternState_B = value;
					this.SendPropertyChanged("Athlet_ExternState_B");
					this.OnAthlet_ExternState_BChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Athlet_Crew", Storage="_Crews", ThisKey="Athlet_ID", OtherKey="Crew_Athlete_ID_FK")]
		public EntitySet<Crew> Crews
		{
			get
			{
				return this._Crews;
			}
			set
			{
				this._Crews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Athlet", Storage="_Club", ThisKey="Athlet_Club_ID_FK", OtherKey="Club_ID", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Athlets.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Athlets.Add(this);
						this._Athlet_Club_ID_FK = value.Club_ID;
					}
					else
					{
						this._Athlet_Club_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nation_Athlet", Storage="_Nation", ThisKey="Athlet_Nation_ID_FK", OtherKey="Nation_ID", IsForeignKey=true)]
		public Nation Nation
		{
			get
			{
				return this._Nation.Entity;
			}
			set
			{
				Nation previousValue = this._Nation.Entity;
				if (((previousValue != value) 
							|| (this._Nation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nation.Entity = null;
						previousValue.Athlets.Remove(this);
					}
					this._Nation.Entity = value;
					if ((value != null))
					{
						value.Athlets.Add(this);
						this._Athlet_Nation_ID_FK = value.Nation_ID;
					}
					else
					{
						this._Athlet_Nation_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Nation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Crews(Crew entity)
		{
			this.SendPropertyChanging();
			entity.Athlet = this;
		}
		
		private void detach_Crews(Crew entity)
		{
			this.SendPropertyChanging();
			entity.Athlet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoatClass")]
	public partial class BoatClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BoatClass_ID;
		
		private string _BoatClass_Caption;
		
		private string _BoatClass_Abbr;
		
		private byte _BoatClass_NumRowers;
		
		private byte _BoatClass_Coxed;
		
		private EntitySet<Offer> _Offers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBoatClass_IDChanging(int value);
    partial void OnBoatClass_IDChanged();
    partial void OnBoatClass_CaptionChanging(string value);
    partial void OnBoatClass_CaptionChanged();
    partial void OnBoatClass_AbbrChanging(string value);
    partial void OnBoatClass_AbbrChanged();
    partial void OnBoatClass_NumRowersChanging(byte value);
    partial void OnBoatClass_NumRowersChanged();
    partial void OnBoatClass_CoxedChanging(byte value);
    partial void OnBoatClass_CoxedChanged();
    #endregion
		
		public BoatClass()
		{
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatClass_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BoatClass_ID
		{
			get
			{
				return this._BoatClass_ID;
			}
			set
			{
				if ((this._BoatClass_ID != value))
				{
					this.OnBoatClass_IDChanging(value);
					this.SendPropertyChanging();
					this._BoatClass_ID = value;
					this.SendPropertyChanged("BoatClass_ID");
					this.OnBoatClass_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatClass_Caption", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BoatClass_Caption
		{
			get
			{
				return this._BoatClass_Caption;
			}
			set
			{
				if ((this._BoatClass_Caption != value))
				{
					this.OnBoatClass_CaptionChanging(value);
					this.SendPropertyChanging();
					this._BoatClass_Caption = value;
					this.SendPropertyChanged("BoatClass_Caption");
					this.OnBoatClass_CaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatClass_Abbr", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string BoatClass_Abbr
		{
			get
			{
				return this._BoatClass_Abbr;
			}
			set
			{
				if ((this._BoatClass_Abbr != value))
				{
					this.OnBoatClass_AbbrChanging(value);
					this.SendPropertyChanging();
					this._BoatClass_Abbr = value;
					this.SendPropertyChanged("BoatClass_Abbr");
					this.OnBoatClass_AbbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatClass_NumRowers", DbType="TinyInt NOT NULL")]
		public byte BoatClass_NumRowers
		{
			get
			{
				return this._BoatClass_NumRowers;
			}
			set
			{
				if ((this._BoatClass_NumRowers != value))
				{
					this.OnBoatClass_NumRowersChanging(value);
					this.SendPropertyChanging();
					this._BoatClass_NumRowers = value;
					this.SendPropertyChanged("BoatClass_NumRowers");
					this.OnBoatClass_NumRowersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatClass_Coxed", DbType="TinyInt NOT NULL")]
		public byte BoatClass_Coxed
		{
			get
			{
				return this._BoatClass_Coxed;
			}
			set
			{
				if ((this._BoatClass_Coxed != value))
				{
					this.OnBoatClass_CoxedChanging(value);
					this.SendPropertyChanging();
					this._BoatClass_Coxed = value;
					this.SendPropertyChanged("BoatClass_Coxed");
					this.OnBoatClass_CoxedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoatClass_Offer", Storage="_Offers", ThisKey="BoatClass_ID", OtherKey="Offer_BoatClass_ID_FK")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.BoatClass = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.BoatClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Club")]
	public partial class Club : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Club_ID;
		
		private string _Club_Name;
		
		private string _Club_Abbr;
		
		private string _Club_UltraAbbr;
		
		private string _Club_City;
		
		private System.Nullable<int> _Club_ExternID;
		
		private System.Nullable<int> _Club_Nation_ID_FK;
		
		private System.Nullable<decimal> _Club_Discount;
		
		private EntitySet<Athlet> _Athlets;
		
		private EntitySet<Crew> _Crews;
		
		private EntitySet<Entry> _Entries;
		
		private EntitySet<Event> _Events;
		
		private EntityRef<Nation> _Nation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClub_IDChanging(int value);
    partial void OnClub_IDChanged();
    partial void OnClub_NameChanging(string value);
    partial void OnClub_NameChanged();
    partial void OnClub_AbbrChanging(string value);
    partial void OnClub_AbbrChanged();
    partial void OnClub_UltraAbbrChanging(string value);
    partial void OnClub_UltraAbbrChanged();
    partial void OnClub_CityChanging(string value);
    partial void OnClub_CityChanged();
    partial void OnClub_ExternIDChanging(System.Nullable<int> value);
    partial void OnClub_ExternIDChanged();
    partial void OnClub_Nation_ID_FKChanging(System.Nullable<int> value);
    partial void OnClub_Nation_ID_FKChanged();
    partial void OnClub_DiscountChanging(System.Nullable<decimal> value);
    partial void OnClub_DiscountChanged();
    #endregion
		
		public Club()
		{
			this._Athlets = new EntitySet<Athlet>(new Action<Athlet>(this.attach_Athlets), new Action<Athlet>(this.detach_Athlets));
			this._Crews = new EntitySet<Crew>(new Action<Crew>(this.attach_Crews), new Action<Crew>(this.detach_Crews));
			this._Entries = new EntitySet<Entry>(new Action<Entry>(this.attach_Entries), new Action<Entry>(this.detach_Entries));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Nation = default(EntityRef<Nation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Club_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Club_ID
		{
			get
			{
				return this._Club_ID;
			}
			set
			{
				if ((this._Club_ID != value))
				{
					this.OnClub_IDChanging(value);
					this.SendPropertyChanging();
					this._Club_ID = value;
					this.SendPropertyChanged("Club_ID");
					this.OnClub_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Club_Name", DbType="VarChar(128)")]
		public string Club_Name
		{
			get
			{
				return this._Club_Name;
			}
			set
			{
				if ((this._Club_Name != value))
				{
					this.OnClub_NameChanging(value);
					this.SendPropertyChanging();
					this._Club_Name = value;
					this.SendPropertyChanged("Club_Name");
					this.OnClub_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Club_Abbr", DbType="VarChar(50)")]
		public string Club_Abbr
		{
			get
			{
				return this._Club_Abbr;
			}
			set
			{
				if ((this._Club_Abbr != value))
				{
					this.OnClub_AbbrChanging(value);
					this.SendPropertyChanging();
					this._Club_Abbr = value;
					this.SendPropertyChanged("Club_Abbr");
					this.OnClub_AbbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Club_UltraAbbr", DbType="VarChar(16)")]
		public string Club_UltraAbbr
		{
			get
			{
				return this._Club_UltraAbbr;
			}
			set
			{
				if ((this._Club_UltraAbbr != value))
				{
					this.OnClub_UltraAbbrChanging(value);
					this.SendPropertyChanging();
					this._Club_UltraAbbr = value;
					this.SendPropertyChanged("Club_UltraAbbr");
					this.OnClub_UltraAbbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Club_City", DbType="VarChar(64)")]
		public string Club_City
		{
			get
			{
				return this._Club_City;
			}
			set
			{
				if ((this._Club_City != value))
				{
					this.OnClub_CityChanging(value);
					this.SendPropertyChanging();
					this._Club_City = value;
					this.SendPropertyChanged("Club_City");
					this.OnClub_CityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Club_ExternID", DbType="Int")]
		public System.Nullable<int> Club_ExternID
		{
			get
			{
				return this._Club_ExternID;
			}
			set
			{
				if ((this._Club_ExternID != value))
				{
					this.OnClub_ExternIDChanging(value);
					this.SendPropertyChanging();
					this._Club_ExternID = value;
					this.SendPropertyChanged("Club_ExternID");
					this.OnClub_ExternIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Club_Nation_ID_FK", DbType="Int")]
		public System.Nullable<int> Club_Nation_ID_FK
		{
			get
			{
				return this._Club_Nation_ID_FK;
			}
			set
			{
				if ((this._Club_Nation_ID_FK != value))
				{
					if (this._Nation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClub_Nation_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Club_Nation_ID_FK = value;
					this.SendPropertyChanged("Club_Nation_ID_FK");
					this.OnClub_Nation_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Club_Discount", DbType="Decimal(6,3)")]
		public System.Nullable<decimal> Club_Discount
		{
			get
			{
				return this._Club_Discount;
			}
			set
			{
				if ((this._Club_Discount != value))
				{
					this.OnClub_DiscountChanging(value);
					this.SendPropertyChanging();
					this._Club_Discount = value;
					this.SendPropertyChanged("Club_Discount");
					this.OnClub_DiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Athlet", Storage="_Athlets", ThisKey="Club_ID", OtherKey="Athlet_Club_ID_FK")]
		public EntitySet<Athlet> Athlets
		{
			get
			{
				return this._Athlets;
			}
			set
			{
				this._Athlets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Crew", Storage="_Crews", ThisKey="Club_ID", OtherKey="Crew_Club_ID_FK")]
		public EntitySet<Crew> Crews
		{
			get
			{
				return this._Crews;
			}
			set
			{
				this._Crews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Entry", Storage="_Entries", ThisKey="Club_ID", OtherKey="Entry_OwnerClub_ID_FK")]
		public EntitySet<Entry> Entries
		{
			get
			{
				return this._Entries;
			}
			set
			{
				this._Entries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Event", Storage="_Events", ThisKey="Club_ID", OtherKey="Event_Club_ID_FK")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nation_Club", Storage="_Nation", ThisKey="Club_Nation_ID_FK", OtherKey="Nation_ID", IsForeignKey=true)]
		public Nation Nation
		{
			get
			{
				return this._Nation.Entity;
			}
			set
			{
				Nation previousValue = this._Nation.Entity;
				if (((previousValue != value) 
							|| (this._Nation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nation.Entity = null;
						previousValue.Clubs.Remove(this);
					}
					this._Nation.Entity = value;
					if ((value != null))
					{
						value.Clubs.Add(this);
						this._Club_Nation_ID_FK = value.Nation_ID;
					}
					else
					{
						this._Club_Nation_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Nation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Athlets(Athlet entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Athlets(Athlet entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Crews(Crew entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Crews(Crew entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Entries(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Entries(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comp")]
	public partial class Comp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Comp_ID;
		
		private System.Nullable<int> _Comp_Race_ID_FK;
		
		private int _Comp_Event_ID_FK;
		
		private System.Nullable<short> _Comp_Round;
		
		private System.Nullable<short> _Comp_HeatNumber;
		
		private string _Comp_RoundCode;
		
		private string _Comp_Label;
		
		private short _Comp_GroupValue;
		
		private System.Nullable<System.DateTime> _Comp_DateTime;
		
		private byte _Comp_State;
		
		private short _Comp_Number;
		
		private bool _Comp_Locked;
		
		private bool _Comp_Dummy;
		
		private bool _Comp_Cancelled;
		
		private System.Nullable<int> _Comp_RMDetail_ID_FK;
		
		private EntitySet<CompEntry> _CompEntries;
		
		private EntitySet<CompReferee> _CompReferees;
		
		private EntitySet<ReportInfo> _ReportInfos;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Offer> _Offer;
		
		private EntityRef<RaceMode_Detail> _RaceMode_Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComp_IDChanging(int value);
    partial void OnComp_IDChanged();
    partial void OnComp_Race_ID_FKChanging(System.Nullable<int> value);
    partial void OnComp_Race_ID_FKChanged();
    partial void OnComp_Event_ID_FKChanging(int value);
    partial void OnComp_Event_ID_FKChanged();
    partial void OnComp_RoundChanging(System.Nullable<short> value);
    partial void OnComp_RoundChanged();
    partial void OnComp_HeatNumberChanging(System.Nullable<short> value);
    partial void OnComp_HeatNumberChanged();
    partial void OnComp_RoundCodeChanging(string value);
    partial void OnComp_RoundCodeChanged();
    partial void OnComp_LabelChanging(string value);
    partial void OnComp_LabelChanged();
    partial void OnComp_GroupValueChanging(short value);
    partial void OnComp_GroupValueChanged();
    partial void OnComp_DateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnComp_DateTimeChanged();
    partial void OnComp_StateChanging(byte value);
    partial void OnComp_StateChanged();
    partial void OnComp_NumberChanging(short value);
    partial void OnComp_NumberChanged();
    partial void OnComp_LockedChanging(bool value);
    partial void OnComp_LockedChanged();
    partial void OnComp_DummyChanging(bool value);
    partial void OnComp_DummyChanged();
    partial void OnComp_CancelledChanging(bool value);
    partial void OnComp_CancelledChanged();
    partial void OnComp_RMDetail_ID_FKChanging(System.Nullable<int> value);
    partial void OnComp_RMDetail_ID_FKChanged();
    #endregion
		
		public Comp()
		{
			this._CompEntries = new EntitySet<CompEntry>(new Action<CompEntry>(this.attach_CompEntries), new Action<CompEntry>(this.detach_CompEntries));
			this._CompReferees = new EntitySet<CompReferee>(new Action<CompReferee>(this.attach_CompReferees), new Action<CompReferee>(this.detach_CompReferees));
			this._ReportInfos = new EntitySet<ReportInfo>(new Action<ReportInfo>(this.attach_ReportInfos), new Action<ReportInfo>(this.detach_ReportInfos));
			this._Event = default(EntityRef<Event>);
			this._Offer = default(EntityRef<Offer>);
			this._RaceMode_Detail = default(EntityRef<RaceMode_Detail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Comp_ID
		{
			get
			{
				return this._Comp_ID;
			}
			set
			{
				if ((this._Comp_ID != value))
				{
					this.OnComp_IDChanging(value);
					this.SendPropertyChanging();
					this._Comp_ID = value;
					this.SendPropertyChanged("Comp_ID");
					this.OnComp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_Race_ID_FK", DbType="Int")]
		public System.Nullable<int> Comp_Race_ID_FK
		{
			get
			{
				return this._Comp_Race_ID_FK;
			}
			set
			{
				if ((this._Comp_Race_ID_FK != value))
				{
					if (this._Offer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComp_Race_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Comp_Race_ID_FK = value;
					this.SendPropertyChanged("Comp_Race_ID_FK");
					this.OnComp_Race_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_Event_ID_FK", DbType="Int NOT NULL")]
		public int Comp_Event_ID_FK
		{
			get
			{
				return this._Comp_Event_ID_FK;
			}
			set
			{
				if ((this._Comp_Event_ID_FK != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComp_Event_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Comp_Event_ID_FK = value;
					this.SendPropertyChanged("Comp_Event_ID_FK");
					this.OnComp_Event_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_Round", DbType="SmallInt")]
		public System.Nullable<short> Comp_Round
		{
			get
			{
				return this._Comp_Round;
			}
			set
			{
				if ((this._Comp_Round != value))
				{
					this.OnComp_RoundChanging(value);
					this.SendPropertyChanging();
					this._Comp_Round = value;
					this.SendPropertyChanged("Comp_Round");
					this.OnComp_RoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_HeatNumber", DbType="SmallInt")]
		public System.Nullable<short> Comp_HeatNumber
		{
			get
			{
				return this._Comp_HeatNumber;
			}
			set
			{
				if ((this._Comp_HeatNumber != value))
				{
					this.OnComp_HeatNumberChanging(value);
					this.SendPropertyChanging();
					this._Comp_HeatNumber = value;
					this.SendPropertyChanged("Comp_HeatNumber");
					this.OnComp_HeatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_RoundCode", DbType="VarChar(8)")]
		public string Comp_RoundCode
		{
			get
			{
				return this._Comp_RoundCode;
			}
			set
			{
				if ((this._Comp_RoundCode != value))
				{
					this.OnComp_RoundCodeChanging(value);
					this.SendPropertyChanging();
					this._Comp_RoundCode = value;
					this.SendPropertyChanged("Comp_RoundCode");
					this.OnComp_RoundCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_Label", DbType="VarChar(32)")]
		public string Comp_Label
		{
			get
			{
				return this._Comp_Label;
			}
			set
			{
				if ((this._Comp_Label != value))
				{
					this.OnComp_LabelChanging(value);
					this.SendPropertyChanging();
					this._Comp_Label = value;
					this.SendPropertyChanged("Comp_Label");
					this.OnComp_LabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_GroupValue", DbType="SmallInt NOT NULL")]
		public short Comp_GroupValue
		{
			get
			{
				return this._Comp_GroupValue;
			}
			set
			{
				if ((this._Comp_GroupValue != value))
				{
					this.OnComp_GroupValueChanging(value);
					this.SendPropertyChanging();
					this._Comp_GroupValue = value;
					this.SendPropertyChanged("Comp_GroupValue");
					this.OnComp_GroupValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_DateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> Comp_DateTime
		{
			get
			{
				return this._Comp_DateTime;
			}
			set
			{
				if ((this._Comp_DateTime != value))
				{
					this.OnComp_DateTimeChanging(value);
					this.SendPropertyChanging();
					this._Comp_DateTime = value;
					this.SendPropertyChanged("Comp_DateTime");
					this.OnComp_DateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_State", DbType="TinyInt NOT NULL")]
		public byte Comp_State
		{
			get
			{
				return this._Comp_State;
			}
			set
			{
				if ((this._Comp_State != value))
				{
					this.OnComp_StateChanging(value);
					this.SendPropertyChanging();
					this._Comp_State = value;
					this.SendPropertyChanged("Comp_State");
					this.OnComp_StateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_Number", DbType="SmallInt NOT NULL")]
		public short Comp_Number
		{
			get
			{
				return this._Comp_Number;
			}
			set
			{
				if ((this._Comp_Number != value))
				{
					this.OnComp_NumberChanging(value);
					this.SendPropertyChanging();
					this._Comp_Number = value;
					this.SendPropertyChanged("Comp_Number");
					this.OnComp_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_Locked", DbType="Bit NOT NULL")]
		public bool Comp_Locked
		{
			get
			{
				return this._Comp_Locked;
			}
			set
			{
				if ((this._Comp_Locked != value))
				{
					this.OnComp_LockedChanging(value);
					this.SendPropertyChanging();
					this._Comp_Locked = value;
					this.SendPropertyChanged("Comp_Locked");
					this.OnComp_LockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_Dummy", DbType="Bit NOT NULL")]
		public bool Comp_Dummy
		{
			get
			{
				return this._Comp_Dummy;
			}
			set
			{
				if ((this._Comp_Dummy != value))
				{
					this.OnComp_DummyChanging(value);
					this.SendPropertyChanging();
					this._Comp_Dummy = value;
					this.SendPropertyChanged("Comp_Dummy");
					this.OnComp_DummyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_Cancelled", DbType="Bit NOT NULL")]
		public bool Comp_Cancelled
		{
			get
			{
				return this._Comp_Cancelled;
			}
			set
			{
				if ((this._Comp_Cancelled != value))
				{
					this.OnComp_CancelledChanging(value);
					this.SendPropertyChanging();
					this._Comp_Cancelled = value;
					this.SendPropertyChanged("Comp_Cancelled");
					this.OnComp_CancelledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp_RMDetail_ID_FK", DbType="Int")]
		public System.Nullable<int> Comp_RMDetail_ID_FK
		{
			get
			{
				return this._Comp_RMDetail_ID_FK;
			}
			set
			{
				if ((this._Comp_RMDetail_ID_FK != value))
				{
					if (this._RaceMode_Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComp_RMDetail_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Comp_RMDetail_ID_FK = value;
					this.SendPropertyChanged("Comp_RMDetail_ID_FK");
					this.OnComp_RMDetail_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comp_CompEntry", Storage="_CompEntries", ThisKey="Comp_ID", OtherKey="CE_Comp_ID_FK")]
		public EntitySet<CompEntry> CompEntries
		{
			get
			{
				return this._CompEntries;
			}
			set
			{
				this._CompEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comp_CompReferee", Storage="_CompReferees", ThisKey="Comp_ID", OtherKey="CompReferee_Comp_ID_FK")]
		public EntitySet<CompReferee> CompReferees
		{
			get
			{
				return this._CompReferees;
			}
			set
			{
				this._CompReferees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comp_ReportInfo", Storage="_ReportInfos", ThisKey="Comp_ID", OtherKey="Report_Comp_ID_FK")]
		public EntitySet<ReportInfo> ReportInfos
		{
			get
			{
				return this._ReportInfos;
			}
			set
			{
				this._ReportInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Comp", Storage="_Event", ThisKey="Comp_Event_ID_FK", OtherKey="Event_ID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Comps.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Comps.Add(this);
						this._Comp_Event_ID_FK = value.Event_ID;
					}
					else
					{
						this._Comp_Event_ID_FK = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offer_Comp", Storage="_Offer", ThisKey="Comp_Race_ID_FK", OtherKey="Offer_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Offer Offer
		{
			get
			{
				return this._Offer.Entity;
			}
			set
			{
				Offer previousValue = this._Offer.Entity;
				if (((previousValue != value) 
							|| (this._Offer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Offer.Entity = null;
						previousValue.Comps.Remove(this);
					}
					this._Offer.Entity = value;
					if ((value != null))
					{
						value.Comps.Add(this);
						this._Comp_Race_ID_FK = value.Offer_ID;
					}
					else
					{
						this._Comp_Race_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Offer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceMode_Detail_Comp", Storage="_RaceMode_Detail", ThisKey="Comp_RMDetail_ID_FK", OtherKey="RMLap_ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public RaceMode_Detail RaceMode_Detail
		{
			get
			{
				return this._RaceMode_Detail.Entity;
			}
			set
			{
				RaceMode_Detail previousValue = this._RaceMode_Detail.Entity;
				if (((previousValue != value) 
							|| (this._RaceMode_Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RaceMode_Detail.Entity = null;
						previousValue.Comps.Remove(this);
					}
					this._RaceMode_Detail.Entity = value;
					if ((value != null))
					{
						value.Comps.Add(this);
						this._Comp_RMDetail_ID_FK = value.RMLap_ID;
					}
					else
					{
						this._Comp_RMDetail_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("RaceMode_Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompEntries(CompEntry entity)
		{
			this.SendPropertyChanging();
			entity.Comp = this;
		}
		
		private void detach_CompEntries(CompEntry entity)
		{
			this.SendPropertyChanging();
			entity.Comp = null;
		}
		
		private void attach_CompReferees(CompReferee entity)
		{
			this.SendPropertyChanging();
			entity.Comp = this;
		}
		
		private void detach_CompReferees(CompReferee entity)
		{
			this.SendPropertyChanging();
			entity.Comp = null;
		}
		
		private void attach_ReportInfos(ReportInfo entity)
		{
			this.SendPropertyChanging();
			entity.Comp = this;
		}
		
		private void detach_ReportInfos(ReportInfo entity)
		{
			this.SendPropertyChanging();
			entity.Comp = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompEntries")]
	public partial class CompEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CE_ID;
		
		private System.Nullable<int> _CE_Comp_ID_FK;
		
		private int _CE_Entry_ID_FK;
		
		private System.Nullable<short> _CE_Lane;
		
		private EntitySet<Result> _Results;
		
		private EntityRef<Comp> _Comp;
		
		private EntityRef<Entry> _Entry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCE_IDChanging(int value);
    partial void OnCE_IDChanged();
    partial void OnCE_Comp_ID_FKChanging(System.Nullable<int> value);
    partial void OnCE_Comp_ID_FKChanged();
    partial void OnCE_Entry_ID_FKChanging(int value);
    partial void OnCE_Entry_ID_FKChanged();
    partial void OnCE_LaneChanging(System.Nullable<short> value);
    partial void OnCE_LaneChanged();
    #endregion
		
		public CompEntry()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._Comp = default(EntityRef<Comp>);
			this._Entry = default(EntityRef<Entry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CE_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CE_ID
		{
			get
			{
				return this._CE_ID;
			}
			set
			{
				if ((this._CE_ID != value))
				{
					this.OnCE_IDChanging(value);
					this.SendPropertyChanging();
					this._CE_ID = value;
					this.SendPropertyChanged("CE_ID");
					this.OnCE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CE_Comp_ID_FK", DbType="Int")]
		public System.Nullable<int> CE_Comp_ID_FK
		{
			get
			{
				return this._CE_Comp_ID_FK;
			}
			set
			{
				if ((this._CE_Comp_ID_FK != value))
				{
					if (this._Comp.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCE_Comp_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._CE_Comp_ID_FK = value;
					this.SendPropertyChanged("CE_Comp_ID_FK");
					this.OnCE_Comp_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CE_Entry_ID_FK", DbType="Int NOT NULL")]
		public int CE_Entry_ID_FK
		{
			get
			{
				return this._CE_Entry_ID_FK;
			}
			set
			{
				if ((this._CE_Entry_ID_FK != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCE_Entry_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._CE_Entry_ID_FK = value;
					this.SendPropertyChanged("CE_Entry_ID_FK");
					this.OnCE_Entry_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CE_Lane", DbType="SmallInt")]
		public System.Nullable<short> CE_Lane
		{
			get
			{
				return this._CE_Lane;
			}
			set
			{
				if ((this._CE_Lane != value))
				{
					this.OnCE_LaneChanging(value);
					this.SendPropertyChanging();
					this._CE_Lane = value;
					this.SendPropertyChanged("CE_Lane");
					this.OnCE_LaneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompEntry_Result", Storage="_Results", ThisKey="CE_ID", OtherKey="Result_CE_ID_FK")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comp_CompEntry", Storage="_Comp", ThisKey="CE_Comp_ID_FK", OtherKey="Comp_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Comp Comp
		{
			get
			{
				return this._Comp.Entity;
			}
			set
			{
				Comp previousValue = this._Comp.Entity;
				if (((previousValue != value) 
							|| (this._Comp.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comp.Entity = null;
						previousValue.CompEntries.Remove(this);
					}
					this._Comp.Entity = value;
					if ((value != null))
					{
						value.CompEntries.Add(this);
						this._CE_Comp_ID_FK = value.Comp_ID;
					}
					else
					{
						this._CE_Comp_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Comp");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_CompEntry", Storage="_Entry", ThisKey="CE_Entry_ID_FK", OtherKey="Entry_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.CompEntries.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.CompEntries.Add(this);
						this._CE_Entry_ID_FK = value.Entry_ID;
					}
					else
					{
						this._CE_Entry_ID_FK = default(int);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.CompEntry = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.CompEntry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompReferee")]
	public partial class CompReferee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompReferee_ID;
		
		private int _CompReferee_Comp_ID_FK;
		
		private int _CompReferee_Referee_ID_FK;
		
		private System.Nullable<char> _CompReferee_Role;
		
		private EntityRef<Comp> _Comp;
		
		private EntityRef<Referee> _Referee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompReferee_IDChanging(int value);
    partial void OnCompReferee_IDChanged();
    partial void OnCompReferee_Comp_ID_FKChanging(int value);
    partial void OnCompReferee_Comp_ID_FKChanged();
    partial void OnCompReferee_Referee_ID_FKChanging(int value);
    partial void OnCompReferee_Referee_ID_FKChanged();
    partial void OnCompReferee_RoleChanging(System.Nullable<char> value);
    partial void OnCompReferee_RoleChanged();
    #endregion
		
		public CompReferee()
		{
			this._Comp = default(EntityRef<Comp>);
			this._Referee = default(EntityRef<Referee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompReferee_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompReferee_ID
		{
			get
			{
				return this._CompReferee_ID;
			}
			set
			{
				if ((this._CompReferee_ID != value))
				{
					this.OnCompReferee_IDChanging(value);
					this.SendPropertyChanging();
					this._CompReferee_ID = value;
					this.SendPropertyChanged("CompReferee_ID");
					this.OnCompReferee_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompReferee_Comp_ID_FK", DbType="Int NOT NULL")]
		public int CompReferee_Comp_ID_FK
		{
			get
			{
				return this._CompReferee_Comp_ID_FK;
			}
			set
			{
				if ((this._CompReferee_Comp_ID_FK != value))
				{
					if (this._Comp.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompReferee_Comp_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._CompReferee_Comp_ID_FK = value;
					this.SendPropertyChanged("CompReferee_Comp_ID_FK");
					this.OnCompReferee_Comp_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompReferee_Referee_ID_FK", DbType="Int NOT NULL")]
		public int CompReferee_Referee_ID_FK
		{
			get
			{
				return this._CompReferee_Referee_ID_FK;
			}
			set
			{
				if ((this._CompReferee_Referee_ID_FK != value))
				{
					if (this._Referee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompReferee_Referee_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._CompReferee_Referee_ID_FK = value;
					this.SendPropertyChanged("CompReferee_Referee_ID_FK");
					this.OnCompReferee_Referee_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompReferee_Role", DbType="Char(1)")]
		public System.Nullable<char> CompReferee_Role
		{
			get
			{
				return this._CompReferee_Role;
			}
			set
			{
				if ((this._CompReferee_Role != value))
				{
					this.OnCompReferee_RoleChanging(value);
					this.SendPropertyChanging();
					this._CompReferee_Role = value;
					this.SendPropertyChanged("CompReferee_Role");
					this.OnCompReferee_RoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comp_CompReferee", Storage="_Comp", ThisKey="CompReferee_Comp_ID_FK", OtherKey="Comp_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comp Comp
		{
			get
			{
				return this._Comp.Entity;
			}
			set
			{
				Comp previousValue = this._Comp.Entity;
				if (((previousValue != value) 
							|| (this._Comp.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comp.Entity = null;
						previousValue.CompReferees.Remove(this);
					}
					this._Comp.Entity = value;
					if ((value != null))
					{
						value.CompReferees.Add(this);
						this._CompReferee_Comp_ID_FK = value.Comp_ID;
					}
					else
					{
						this._CompReferee_Comp_ID_FK = default(int);
					}
					this.SendPropertyChanged("Comp");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referee_CompReferee", Storage="_Referee", ThisKey="CompReferee_Referee_ID_FK", OtherKey="Referee_ID", IsForeignKey=true)]
		public Referee Referee
		{
			get
			{
				return this._Referee.Entity;
			}
			set
			{
				Referee previousValue = this._Referee.Entity;
				if (((previousValue != value) 
							|| (this._Referee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Referee.Entity = null;
						previousValue.CompReferees.Remove(this);
					}
					this._Referee.Entity = value;
					if ((value != null))
					{
						value.CompReferees.Add(this);
						this._CompReferee_Referee_ID_FK = value.Referee_ID;
					}
					else
					{
						this._CompReferee_Referee_ID_FK = default(int);
					}
					this.SendPropertyChanged("Referee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Crew")]
	public partial class Crew : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Crew_ID;
		
		private int _Crew_Entry_ID_FK;
		
		private int _Crew_Athlete_ID_FK;
		
		private byte _Crew_Pos;
		
		private int _Crew_Club_ID_FK;
		
		private short _Crew_Round;
		
		private bool _Crew_IsCox;
		
		private EntityRef<Athlet> _Athlet;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<Entry> _Entry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCrew_IDChanging(int value);
    partial void OnCrew_IDChanged();
    partial void OnCrew_Entry_ID_FKChanging(int value);
    partial void OnCrew_Entry_ID_FKChanged();
    partial void OnCrew_Athlete_ID_FKChanging(int value);
    partial void OnCrew_Athlete_ID_FKChanged();
    partial void OnCrew_PosChanging(byte value);
    partial void OnCrew_PosChanged();
    partial void OnCrew_Club_ID_FKChanging(int value);
    partial void OnCrew_Club_ID_FKChanged();
    partial void OnCrew_RoundChanging(short value);
    partial void OnCrew_RoundChanged();
    partial void OnCrew_IsCoxChanging(bool value);
    partial void OnCrew_IsCoxChanged();
    #endregion
		
		public Crew()
		{
			this._Athlet = default(EntityRef<Athlet>);
			this._Club = default(EntityRef<Club>);
			this._Entry = default(EntityRef<Entry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crew_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Crew_ID
		{
			get
			{
				return this._Crew_ID;
			}
			set
			{
				if ((this._Crew_ID != value))
				{
					this.OnCrew_IDChanging(value);
					this.SendPropertyChanging();
					this._Crew_ID = value;
					this.SendPropertyChanged("Crew_ID");
					this.OnCrew_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crew_Entry_ID_FK", DbType="Int NOT NULL")]
		public int Crew_Entry_ID_FK
		{
			get
			{
				return this._Crew_Entry_ID_FK;
			}
			set
			{
				if ((this._Crew_Entry_ID_FK != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrew_Entry_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Crew_Entry_ID_FK = value;
					this.SendPropertyChanged("Crew_Entry_ID_FK");
					this.OnCrew_Entry_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crew_Athlete_ID_FK", DbType="Int NOT NULL")]
		public int Crew_Athlete_ID_FK
		{
			get
			{
				return this._Crew_Athlete_ID_FK;
			}
			set
			{
				if ((this._Crew_Athlete_ID_FK != value))
				{
					if (this._Athlet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrew_Athlete_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Crew_Athlete_ID_FK = value;
					this.SendPropertyChanged("Crew_Athlete_ID_FK");
					this.OnCrew_Athlete_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crew_Pos", DbType="TinyInt NOT NULL")]
		public byte Crew_Pos
		{
			get
			{
				return this._Crew_Pos;
			}
			set
			{
				if ((this._Crew_Pos != value))
				{
					this.OnCrew_PosChanging(value);
					this.SendPropertyChanging();
					this._Crew_Pos = value;
					this.SendPropertyChanged("Crew_Pos");
					this.OnCrew_PosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crew_Club_ID_FK", DbType="Int NOT NULL")]
		public int Crew_Club_ID_FK
		{
			get
			{
				return this._Crew_Club_ID_FK;
			}
			set
			{
				if ((this._Crew_Club_ID_FK != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrew_Club_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Crew_Club_ID_FK = value;
					this.SendPropertyChanged("Crew_Club_ID_FK");
					this.OnCrew_Club_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crew_Round", DbType="SmallInt NOT NULL")]
		public short Crew_Round
		{
			get
			{
				return this._Crew_Round;
			}
			set
			{
				if ((this._Crew_Round != value))
				{
					this.OnCrew_RoundChanging(value);
					this.SendPropertyChanging();
					this._Crew_Round = value;
					this.SendPropertyChanged("Crew_Round");
					this.OnCrew_RoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crew_IsCox", DbType="Bit NOT NULL")]
		public bool Crew_IsCox
		{
			get
			{
				return this._Crew_IsCox;
			}
			set
			{
				if ((this._Crew_IsCox != value))
				{
					this.OnCrew_IsCoxChanging(value);
					this.SendPropertyChanging();
					this._Crew_IsCox = value;
					this.SendPropertyChanged("Crew_IsCox");
					this.OnCrew_IsCoxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Athlet_Crew", Storage="_Athlet", ThisKey="Crew_Athlete_ID_FK", OtherKey="Athlet_ID", IsForeignKey=true)]
		public Athlet Athlet
		{
			get
			{
				return this._Athlet.Entity;
			}
			set
			{
				Athlet previousValue = this._Athlet.Entity;
				if (((previousValue != value) 
							|| (this._Athlet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Athlet.Entity = null;
						previousValue.Crews.Remove(this);
					}
					this._Athlet.Entity = value;
					if ((value != null))
					{
						value.Crews.Add(this);
						this._Crew_Athlete_ID_FK = value.Athlet_ID;
					}
					else
					{
						this._Crew_Athlete_ID_FK = default(int);
					}
					this.SendPropertyChanged("Athlet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Crew", Storage="_Club", ThisKey="Crew_Club_ID_FK", OtherKey="Club_ID", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Crews.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Crews.Add(this);
						this._Crew_Club_ID_FK = value.Club_ID;
					}
					else
					{
						this._Crew_Club_ID_FK = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_Crew", Storage="_Entry", ThisKey="Crew_Entry_ID_FK", OtherKey="Entry_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.Crews.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.Crews.Add(this);
						this._Crew_Entry_ID_FK = value.Entry_ID;
					}
					else
					{
						this._Crew_Entry_ID_FK = default(int);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cup")]
	public partial class Cup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Race_ID_FK;
		
		private System.Nullable<int> _PointTable_ID_FK;
		
		private System.Nullable<int> _Parent_ID;
		
		private string _Caption;
		
		private EntitySet<Cup> _Cups;
		
		private EntityRef<Cup> _Cup1;
		
		private EntityRef<CupPointTable> _CupPointTable;
		
		private EntityRef<Offer> _Offer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRace_ID_FKChanging(System.Nullable<int> value);
    partial void OnRace_ID_FKChanged();
    partial void OnPointTable_ID_FKChanging(System.Nullable<int> value);
    partial void OnPointTable_ID_FKChanged();
    partial void OnParent_IDChanging(System.Nullable<int> value);
    partial void OnParent_IDChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    #endregion
		
		public Cup()
		{
			this._Cups = new EntitySet<Cup>(new Action<Cup>(this.attach_Cups), new Action<Cup>(this.detach_Cups));
			this._Cup1 = default(EntityRef<Cup>);
			this._CupPointTable = default(EntityRef<CupPointTable>);
			this._Offer = default(EntityRef<Offer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Race_ID_FK", DbType="Int")]
		public System.Nullable<int> Race_ID_FK
		{
			get
			{
				return this._Race_ID_FK;
			}
			set
			{
				if ((this._Race_ID_FK != value))
				{
					if (this._Offer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRace_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Race_ID_FK = value;
					this.SendPropertyChanged("Race_ID_FK");
					this.OnRace_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointTable_ID_FK", DbType="Int")]
		public System.Nullable<int> PointTable_ID_FK
		{
			get
			{
				return this._PointTable_ID_FK;
			}
			set
			{
				if ((this._PointTable_ID_FK != value))
				{
					if (this._CupPointTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPointTable_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._PointTable_ID_FK = value;
					this.SendPropertyChanged("PointTable_ID_FK");
					this.OnPointTable_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parent_ID", DbType="Int")]
		public System.Nullable<int> Parent_ID
		{
			get
			{
				return this._Parent_ID;
			}
			set
			{
				if ((this._Parent_ID != value))
				{
					if (this._Cup1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParent_IDChanging(value);
					this.SendPropertyChanging();
					this._Parent_ID = value;
					this.SendPropertyChanged("Parent_ID");
					this.OnParent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NVarChar(32)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cup_Cup", Storage="_Cups", ThisKey="ID", OtherKey="Parent_ID")]
		public EntitySet<Cup> Cups
		{
			get
			{
				return this._Cups;
			}
			set
			{
				this._Cups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cup_Cup", Storage="_Cup1", ThisKey="Parent_ID", OtherKey="ID", IsForeignKey=true)]
		public Cup Cup1
		{
			get
			{
				return this._Cup1.Entity;
			}
			set
			{
				Cup previousValue = this._Cup1.Entity;
				if (((previousValue != value) 
							|| (this._Cup1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cup1.Entity = null;
						previousValue.Cups.Remove(this);
					}
					this._Cup1.Entity = value;
					if ((value != null))
					{
						value.Cups.Add(this);
						this._Parent_ID = value.ID;
					}
					else
					{
						this._Parent_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cup1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CupPointTable_Cup", Storage="_CupPointTable", ThisKey="PointTable_ID_FK", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public CupPointTable CupPointTable
		{
			get
			{
				return this._CupPointTable.Entity;
			}
			set
			{
				CupPointTable previousValue = this._CupPointTable.Entity;
				if (((previousValue != value) 
							|| (this._CupPointTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CupPointTable.Entity = null;
						previousValue.Cups.Remove(this);
					}
					this._CupPointTable.Entity = value;
					if ((value != null))
					{
						value.Cups.Add(this);
						this._PointTable_ID_FK = value.ID;
					}
					else
					{
						this._PointTable_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("CupPointTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offer_Cup", Storage="_Offer", ThisKey="Race_ID_FK", OtherKey="Offer_ID", IsForeignKey=true)]
		public Offer Offer
		{
			get
			{
				return this._Offer.Entity;
			}
			set
			{
				Offer previousValue = this._Offer.Entity;
				if (((previousValue != value) 
							|| (this._Offer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Offer.Entity = null;
						previousValue.Cups.Remove(this);
					}
					this._Offer.Entity = value;
					if ((value != null))
					{
						value.Cups.Add(this);
						this._Race_ID_FK = value.Offer_ID;
					}
					else
					{
						this._Race_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Offer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cups(Cup entity)
		{
			this.SendPropertyChanging();
			entity.Cup1 = this;
		}
		
		private void detach_Cups(Cup entity)
		{
			this.SendPropertyChanging();
			entity.Cup1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CupPointTable")]
	public partial class CupPointTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<byte> _Rank;
		
		private System.Nullable<short> _Round;
		
		private System.Nullable<short> _Lap;
		
		private System.Nullable<decimal> _Points;
		
		private System.Nullable<int> _Parent_ID;
		
		private string _Caption;
		
		private EntitySet<Cup> _Cups;
		
		private EntitySet<CupPointTable> _CupPointTables;
		
		private EntityRef<CupPointTable> _CupPointTable1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRankChanging(System.Nullable<byte> value);
    partial void OnRankChanged();
    partial void OnRoundChanging(System.Nullable<short> value);
    partial void OnRoundChanged();
    partial void OnLapChanging(System.Nullable<short> value);
    partial void OnLapChanged();
    partial void OnPointsChanging(System.Nullable<decimal> value);
    partial void OnPointsChanged();
    partial void OnParent_IDChanging(System.Nullable<int> value);
    partial void OnParent_IDChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    #endregion
		
		public CupPointTable()
		{
			this._Cups = new EntitySet<Cup>(new Action<Cup>(this.attach_Cups), new Action<Cup>(this.detach_Cups));
			this._CupPointTables = new EntitySet<CupPointTable>(new Action<CupPointTable>(this.attach_CupPointTables), new Action<CupPointTable>(this.detach_CupPointTables));
			this._CupPointTable1 = default(EntityRef<CupPointTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="TinyInt")]
		public System.Nullable<byte> Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt")]
		public System.Nullable<short> Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lap", DbType="SmallInt")]
		public System.Nullable<short> Lap
		{
			get
			{
				return this._Lap;
			}
			set
			{
				if ((this._Lap != value))
				{
					this.OnLapChanging(value);
					this.SendPropertyChanging();
					this._Lap = value;
					this.SendPropertyChanged("Lap");
					this.OnLapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Decimal(10,4)")]
		public System.Nullable<decimal> Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parent_ID", DbType="Int")]
		public System.Nullable<int> Parent_ID
		{
			get
			{
				return this._Parent_ID;
			}
			set
			{
				if ((this._Parent_ID != value))
				{
					if (this._CupPointTable1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParent_IDChanging(value);
					this.SendPropertyChanging();
					this._Parent_ID = value;
					this.SendPropertyChanged("Parent_ID");
					this.OnParent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NVarChar(32)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CupPointTable_Cup", Storage="_Cups", ThisKey="ID", OtherKey="PointTable_ID_FK")]
		public EntitySet<Cup> Cups
		{
			get
			{
				return this._Cups;
			}
			set
			{
				this._Cups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CupPointTable_CupPointTable", Storage="_CupPointTables", ThisKey="ID", OtherKey="Parent_ID")]
		public EntitySet<CupPointTable> CupPointTables
		{
			get
			{
				return this._CupPointTables;
			}
			set
			{
				this._CupPointTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CupPointTable_CupPointTable", Storage="_CupPointTable1", ThisKey="Parent_ID", OtherKey="ID", IsForeignKey=true)]
		public CupPointTable CupPointTable1
		{
			get
			{
				return this._CupPointTable1.Entity;
			}
			set
			{
				CupPointTable previousValue = this._CupPointTable1.Entity;
				if (((previousValue != value) 
							|| (this._CupPointTable1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CupPointTable1.Entity = null;
						previousValue.CupPointTables.Remove(this);
					}
					this._CupPointTable1.Entity = value;
					if ((value != null))
					{
						value.CupPointTables.Add(this);
						this._Parent_ID = value.ID;
					}
					else
					{
						this._Parent_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CupPointTable1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cups(Cup entity)
		{
			this.SendPropertyChanging();
			entity.CupPointTable = this;
		}
		
		private void detach_Cups(Cup entity)
		{
			this.SendPropertyChanging();
			entity.CupPointTable = null;
		}
		
		private void attach_CupPointTables(CupPointTable entity)
		{
			this.SendPropertyChanging();
			entity.CupPointTable1 = this;
		}
		
		private void detach_CupPointTables(CupPointTable entity)
		{
			this.SendPropertyChanging();
			entity.CupPointTable1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Entry")]
	public partial class Entry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Entry_ID;
		
		private int _Entry_OwnerClub_ID_FK;
		
		private int _Entry_Event_ID_FK;
		
		private int _Entry_Race_ID_FK;
		
		private System.Nullable<short> _Entry_Bib;
		
		private System.Nullable<short> _Entry_BoatNumber;
		
		private string _Entry_Comment;
		
		private System.Nullable<short> _Entry_GroupValue;
		
		private string _Entry_LongLabel;
		
		private string _Entry_ShortLabel;
		
		private byte _Entry_CancelValue;
		
		private bool _Entry_IsTeam;
		
		private System.Nullable<int> _Entry_ExternID;
		
		private string _Entry_Note;
		
		private bool _Entry_IsLate;
		
		private bool _Entry_HasManualLabel;
		
		private EntitySet<CompEntry> _CompEntries;
		
		private EntitySet<Crew> _Crews;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Offer> _Offer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntry_IDChanging(int value);
    partial void OnEntry_IDChanged();
    partial void OnEntry_OwnerClub_ID_FKChanging(int value);
    partial void OnEntry_OwnerClub_ID_FKChanged();
    partial void OnEntry_Event_ID_FKChanging(int value);
    partial void OnEntry_Event_ID_FKChanged();
    partial void OnEntry_Race_ID_FKChanging(int value);
    partial void OnEntry_Race_ID_FKChanged();
    partial void OnEntry_BibChanging(System.Nullable<short> value);
    partial void OnEntry_BibChanged();
    partial void OnEntry_BoatNumberChanging(System.Nullable<short> value);
    partial void OnEntry_BoatNumberChanged();
    partial void OnEntry_CommentChanging(string value);
    partial void OnEntry_CommentChanged();
    partial void OnEntry_GroupValueChanging(System.Nullable<short> value);
    partial void OnEntry_GroupValueChanged();
    partial void OnEntry_LongLabelChanging(string value);
    partial void OnEntry_LongLabelChanged();
    partial void OnEntry_ShortLabelChanging(string value);
    partial void OnEntry_ShortLabelChanged();
    partial void OnEntry_CancelValueChanging(byte value);
    partial void OnEntry_CancelValueChanged();
    partial void OnEntry_IsTeamChanging(bool value);
    partial void OnEntry_IsTeamChanged();
    partial void OnEntry_ExternIDChanging(System.Nullable<int> value);
    partial void OnEntry_ExternIDChanged();
    partial void OnEntry_NoteChanging(string value);
    partial void OnEntry_NoteChanged();
    partial void OnEntry_IsLateChanging(bool value);
    partial void OnEntry_IsLateChanged();
    partial void OnEntry_HasManualLabelChanging(bool value);
    partial void OnEntry_HasManualLabelChanged();
    #endregion
		
		public Entry()
		{
			this._CompEntries = new EntitySet<CompEntry>(new Action<CompEntry>(this.attach_CompEntries), new Action<CompEntry>(this.detach_CompEntries));
			this._Crews = new EntitySet<Crew>(new Action<Crew>(this.attach_Crews), new Action<Crew>(this.detach_Crews));
			this._Club = default(EntityRef<Club>);
			this._Event = default(EntityRef<Event>);
			this._Offer = default(EntityRef<Offer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Entry_ID
		{
			get
			{
				return this._Entry_ID;
			}
			set
			{
				if ((this._Entry_ID != value))
				{
					this.OnEntry_IDChanging(value);
					this.SendPropertyChanging();
					this._Entry_ID = value;
					this.SendPropertyChanged("Entry_ID");
					this.OnEntry_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_OwnerClub_ID_FK", DbType="Int NOT NULL")]
		public int Entry_OwnerClub_ID_FK
		{
			get
			{
				return this._Entry_OwnerClub_ID_FK;
			}
			set
			{
				if ((this._Entry_OwnerClub_ID_FK != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntry_OwnerClub_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Entry_OwnerClub_ID_FK = value;
					this.SendPropertyChanged("Entry_OwnerClub_ID_FK");
					this.OnEntry_OwnerClub_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_Event_ID_FK", DbType="Int NOT NULL")]
		public int Entry_Event_ID_FK
		{
			get
			{
				return this._Entry_Event_ID_FK;
			}
			set
			{
				if ((this._Entry_Event_ID_FK != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntry_Event_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Entry_Event_ID_FK = value;
					this.SendPropertyChanged("Entry_Event_ID_FK");
					this.OnEntry_Event_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_Race_ID_FK", DbType="Int NOT NULL")]
		public int Entry_Race_ID_FK
		{
			get
			{
				return this._Entry_Race_ID_FK;
			}
			set
			{
				if ((this._Entry_Race_ID_FK != value))
				{
					if (this._Offer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntry_Race_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Entry_Race_ID_FK = value;
					this.SendPropertyChanged("Entry_Race_ID_FK");
					this.OnEntry_Race_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_Bib", DbType="SmallInt")]
		public System.Nullable<short> Entry_Bib
		{
			get
			{
				return this._Entry_Bib;
			}
			set
			{
				if ((this._Entry_Bib != value))
				{
					this.OnEntry_BibChanging(value);
					this.SendPropertyChanging();
					this._Entry_Bib = value;
					this.SendPropertyChanged("Entry_Bib");
					this.OnEntry_BibChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_BoatNumber", DbType="SmallInt")]
		public System.Nullable<short> Entry_BoatNumber
		{
			get
			{
				return this._Entry_BoatNumber;
			}
			set
			{
				if ((this._Entry_BoatNumber != value))
				{
					this.OnEntry_BoatNumberChanging(value);
					this.SendPropertyChanging();
					this._Entry_BoatNumber = value;
					this.SendPropertyChanged("Entry_BoatNumber");
					this.OnEntry_BoatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_Comment", DbType="VarChar(50)")]
		public string Entry_Comment
		{
			get
			{
				return this._Entry_Comment;
			}
			set
			{
				if ((this._Entry_Comment != value))
				{
					this.OnEntry_CommentChanging(value);
					this.SendPropertyChanging();
					this._Entry_Comment = value;
					this.SendPropertyChanged("Entry_Comment");
					this.OnEntry_CommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_GroupValue", DbType="SmallInt")]
		public System.Nullable<short> Entry_GroupValue
		{
			get
			{
				return this._Entry_GroupValue;
			}
			set
			{
				if ((this._Entry_GroupValue != value))
				{
					this.OnEntry_GroupValueChanging(value);
					this.SendPropertyChanging();
					this._Entry_GroupValue = value;
					this.SendPropertyChanged("Entry_GroupValue");
					this.OnEntry_GroupValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_LongLabel", DbType="VarChar(512)")]
		public string Entry_LongLabel
		{
			get
			{
				return this._Entry_LongLabel;
			}
			set
			{
				if ((this._Entry_LongLabel != value))
				{
					this.OnEntry_LongLabelChanging(value);
					this.SendPropertyChanging();
					this._Entry_LongLabel = value;
					this.SendPropertyChanged("Entry_LongLabel");
					this.OnEntry_LongLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_ShortLabel", DbType="VarChar(256)")]
		public string Entry_ShortLabel
		{
			get
			{
				return this._Entry_ShortLabel;
			}
			set
			{
				if ((this._Entry_ShortLabel != value))
				{
					this.OnEntry_ShortLabelChanging(value);
					this.SendPropertyChanging();
					this._Entry_ShortLabel = value;
					this.SendPropertyChanged("Entry_ShortLabel");
					this.OnEntry_ShortLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_CancelValue", DbType="TinyInt NOT NULL")]
		public byte Entry_CancelValue
		{
			get
			{
				return this._Entry_CancelValue;
			}
			set
			{
				if ((this._Entry_CancelValue != value))
				{
					this.OnEntry_CancelValueChanging(value);
					this.SendPropertyChanging();
					this._Entry_CancelValue = value;
					this.SendPropertyChanged("Entry_CancelValue");
					this.OnEntry_CancelValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_IsTeam", DbType="Bit NOT NULL")]
		public bool Entry_IsTeam
		{
			get
			{
				return this._Entry_IsTeam;
			}
			set
			{
				if ((this._Entry_IsTeam != value))
				{
					this.OnEntry_IsTeamChanging(value);
					this.SendPropertyChanging();
					this._Entry_IsTeam = value;
					this.SendPropertyChanged("Entry_IsTeam");
					this.OnEntry_IsTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_ExternID", DbType="Int")]
		public System.Nullable<int> Entry_ExternID
		{
			get
			{
				return this._Entry_ExternID;
			}
			set
			{
				if ((this._Entry_ExternID != value))
				{
					this.OnEntry_ExternIDChanging(value);
					this.SendPropertyChanging();
					this._Entry_ExternID = value;
					this.SendPropertyChanged("Entry_ExternID");
					this.OnEntry_ExternIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_Note", DbType="VarChar(128)")]
		public string Entry_Note
		{
			get
			{
				return this._Entry_Note;
			}
			set
			{
				if ((this._Entry_Note != value))
				{
					this.OnEntry_NoteChanging(value);
					this.SendPropertyChanging();
					this._Entry_Note = value;
					this.SendPropertyChanged("Entry_Note");
					this.OnEntry_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_IsLate", DbType="Bit NOT NULL")]
		public bool Entry_IsLate
		{
			get
			{
				return this._Entry_IsLate;
			}
			set
			{
				if ((this._Entry_IsLate != value))
				{
					this.OnEntry_IsLateChanging(value);
					this.SendPropertyChanging();
					this._Entry_IsLate = value;
					this.SendPropertyChanged("Entry_IsLate");
					this.OnEntry_IsLateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry_HasManualLabel", DbType="Bit NOT NULL")]
		public bool Entry_HasManualLabel
		{
			get
			{
				return this._Entry_HasManualLabel;
			}
			set
			{
				if ((this._Entry_HasManualLabel != value))
				{
					this.OnEntry_HasManualLabelChanging(value);
					this.SendPropertyChanging();
					this._Entry_HasManualLabel = value;
					this.SendPropertyChanged("Entry_HasManualLabel");
					this.OnEntry_HasManualLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_CompEntry", Storage="_CompEntries", ThisKey="Entry_ID", OtherKey="CE_Entry_ID_FK")]
		public EntitySet<CompEntry> CompEntries
		{
			get
			{
				return this._CompEntries;
			}
			set
			{
				this._CompEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_Crew", Storage="_Crews", ThisKey="Entry_ID", OtherKey="Crew_Entry_ID_FK")]
		public EntitySet<Crew> Crews
		{
			get
			{
				return this._Crews;
			}
			set
			{
				this._Crews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Entry", Storage="_Club", ThisKey="Entry_OwnerClub_ID_FK", OtherKey="Club_ID", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Entries.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Entries.Add(this);
						this._Entry_OwnerClub_ID_FK = value.Club_ID;
					}
					else
					{
						this._Entry_OwnerClub_ID_FK = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Entry", Storage="_Event", ThisKey="Entry_Event_ID_FK", OtherKey="Event_ID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Entries.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Entries.Add(this);
						this._Entry_Event_ID_FK = value.Event_ID;
					}
					else
					{
						this._Entry_Event_ID_FK = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offer_Entry", Storage="_Offer", ThisKey="Entry_Race_ID_FK", OtherKey="Offer_ID", IsForeignKey=true)]
		public Offer Offer
		{
			get
			{
				return this._Offer.Entity;
			}
			set
			{
				Offer previousValue = this._Offer.Entity;
				if (((previousValue != value) 
							|| (this._Offer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Offer.Entity = null;
						previousValue.Entries.Remove(this);
					}
					this._Offer.Entity = value;
					if ((value != null))
					{
						value.Entries.Add(this);
						this._Entry_Race_ID_FK = value.Offer_ID;
					}
					else
					{
						this._Entry_Race_ID_FK = default(int);
					}
					this.SendPropertyChanged("Offer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompEntries(CompEntry entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_CompEntries(CompEntry entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
		
		private void attach_Crews(Crew entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_Crews(Crew entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Event_ID;
		
		private string _Event_Title;
		
		private string _Event_SubTitle;
		
		private System.DateTime _Event_StartDate;
		
		private System.DateTime _Event_EndDate;
		
		private string _Event_Venue;
		
		private System.Nullable<int> _Event_Venue_Nation_ID_FK;
		
		private System.Nullable<int> _Event_Club_ID_FK;
		
		private System.Nullable<char> _Event_Type;
		
		private string _Event_TrackDirection;
		
		private System.Nullable<int> _Event_DefaultDistance;
		
		private System.Nullable<int> _Event_DefaultRaceMode_ID_FK;
		
		private string _Event_HeadLogo_A;
		
		private string _Event_HeadLogo_B;
		
		private string _Event_FootLogo;
		
		private string _Event_BoardMemberA;
		
		private string _Event_BoardMemberB;
		
		private System.Nullable<int> _Event_HeadReferee_ID_FK;
		
		private string _Event_Url;
		
		private EntitySet<Comp> _Comps;
		
		private EntitySet<Entry> _Entries;
		
		private EntitySet<EventReferee> _EventReferees;
		
		private EntitySet<Offer> _Offers;
		
		private EntitySet<ReportInfo> _ReportInfos;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<Nation> _Nation;
		
		private EntityRef<RaceMode> _RaceMode;
		
		private EntityRef<Referee> _Referee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvent_IDChanging(int value);
    partial void OnEvent_IDChanged();
    partial void OnEvent_TitleChanging(string value);
    partial void OnEvent_TitleChanged();
    partial void OnEvent_SubTitleChanging(string value);
    partial void OnEvent_SubTitleChanged();
    partial void OnEvent_StartDateChanging(System.DateTime value);
    partial void OnEvent_StartDateChanged();
    partial void OnEvent_EndDateChanging(System.DateTime value);
    partial void OnEvent_EndDateChanged();
    partial void OnEvent_VenueChanging(string value);
    partial void OnEvent_VenueChanged();
    partial void OnEvent_Venue_Nation_ID_FKChanging(System.Nullable<int> value);
    partial void OnEvent_Venue_Nation_ID_FKChanged();
    partial void OnEvent_Club_ID_FKChanging(System.Nullable<int> value);
    partial void OnEvent_Club_ID_FKChanged();
    partial void OnEvent_TypeChanging(System.Nullable<char> value);
    partial void OnEvent_TypeChanged();
    partial void OnEvent_TrackDirectionChanging(string value);
    partial void OnEvent_TrackDirectionChanged();
    partial void OnEvent_DefaultDistanceChanging(System.Nullable<int> value);
    partial void OnEvent_DefaultDistanceChanged();
    partial void OnEvent_DefaultRaceMode_ID_FKChanging(System.Nullable<int> value);
    partial void OnEvent_DefaultRaceMode_ID_FKChanged();
    partial void OnEvent_HeadLogo_AChanging(string value);
    partial void OnEvent_HeadLogo_AChanged();
    partial void OnEvent_HeadLogo_BChanging(string value);
    partial void OnEvent_HeadLogo_BChanged();
    partial void OnEvent_FootLogoChanging(string value);
    partial void OnEvent_FootLogoChanged();
    partial void OnEvent_BoardMemberAChanging(string value);
    partial void OnEvent_BoardMemberAChanged();
    partial void OnEvent_BoardMemberBChanging(string value);
    partial void OnEvent_BoardMemberBChanged();
    partial void OnEvent_HeadReferee_ID_FKChanging(System.Nullable<int> value);
    partial void OnEvent_HeadReferee_ID_FKChanged();
    partial void OnEvent_UrlChanging(string value);
    partial void OnEvent_UrlChanged();
    #endregion
		
		public Event()
		{
			this._Comps = new EntitySet<Comp>(new Action<Comp>(this.attach_Comps), new Action<Comp>(this.detach_Comps));
			this._Entries = new EntitySet<Entry>(new Action<Entry>(this.attach_Entries), new Action<Entry>(this.detach_Entries));
			this._EventReferees = new EntitySet<EventReferee>(new Action<EventReferee>(this.attach_EventReferees), new Action<EventReferee>(this.detach_EventReferees));
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			this._ReportInfos = new EntitySet<ReportInfo>(new Action<ReportInfo>(this.attach_ReportInfos), new Action<ReportInfo>(this.detach_ReportInfos));
			this._Club = default(EntityRef<Club>);
			this._Nation = default(EntityRef<Nation>);
			this._RaceMode = default(EntityRef<RaceMode>);
			this._Referee = default(EntityRef<Referee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Event_ID
		{
			get
			{
				return this._Event_ID;
			}
			set
			{
				if ((this._Event_ID != value))
				{
					this.OnEvent_IDChanging(value);
					this.SendPropertyChanging();
					this._Event_ID = value;
					this.SendPropertyChanged("Event_ID");
					this.OnEvent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Title", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Event_Title
		{
			get
			{
				return this._Event_Title;
			}
			set
			{
				if ((this._Event_Title != value))
				{
					this.OnEvent_TitleChanging(value);
					this.SendPropertyChanging();
					this._Event_Title = value;
					this.SendPropertyChanged("Event_Title");
					this.OnEvent_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_SubTitle", DbType="VarChar(32)")]
		public string Event_SubTitle
		{
			get
			{
				return this._Event_SubTitle;
			}
			set
			{
				if ((this._Event_SubTitle != value))
				{
					this.OnEvent_SubTitleChanging(value);
					this.SendPropertyChanging();
					this._Event_SubTitle = value;
					this.SendPropertyChanged("Event_SubTitle");
					this.OnEvent_SubTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime Event_StartDate
		{
			get
			{
				return this._Event_StartDate;
			}
			set
			{
				if ((this._Event_StartDate != value))
				{
					this.OnEvent_StartDateChanging(value);
					this.SendPropertyChanging();
					this._Event_StartDate = value;
					this.SendPropertyChanged("Event_StartDate");
					this.OnEvent_StartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime Event_EndDate
		{
			get
			{
				return this._Event_EndDate;
			}
			set
			{
				if ((this._Event_EndDate != value))
				{
					this.OnEvent_EndDateChanging(value);
					this.SendPropertyChanging();
					this._Event_EndDate = value;
					this.SendPropertyChanged("Event_EndDate");
					this.OnEvent_EndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Venue", DbType="VarChar(32)")]
		public string Event_Venue
		{
			get
			{
				return this._Event_Venue;
			}
			set
			{
				if ((this._Event_Venue != value))
				{
					this.OnEvent_VenueChanging(value);
					this.SendPropertyChanging();
					this._Event_Venue = value;
					this.SendPropertyChanged("Event_Venue");
					this.OnEvent_VenueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Venue_Nation_ID_FK", DbType="Int")]
		public System.Nullable<int> Event_Venue_Nation_ID_FK
		{
			get
			{
				return this._Event_Venue_Nation_ID_FK;
			}
			set
			{
				if ((this._Event_Venue_Nation_ID_FK != value))
				{
					if (this._Nation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvent_Venue_Nation_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Event_Venue_Nation_ID_FK = value;
					this.SendPropertyChanged("Event_Venue_Nation_ID_FK");
					this.OnEvent_Venue_Nation_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Club_ID_FK", DbType="Int")]
		public System.Nullable<int> Event_Club_ID_FK
		{
			get
			{
				return this._Event_Club_ID_FK;
			}
			set
			{
				if ((this._Event_Club_ID_FK != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvent_Club_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Event_Club_ID_FK = value;
					this.SendPropertyChanged("Event_Club_ID_FK");
					this.OnEvent_Club_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Type", DbType="Char(1)")]
		public System.Nullable<char> Event_Type
		{
			get
			{
				return this._Event_Type;
			}
			set
			{
				if ((this._Event_Type != value))
				{
					this.OnEvent_TypeChanging(value);
					this.SendPropertyChanging();
					this._Event_Type = value;
					this.SendPropertyChanged("Event_Type");
					this.OnEvent_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_TrackDirection", DbType="Char(3)")]
		public string Event_TrackDirection
		{
			get
			{
				return this._Event_TrackDirection;
			}
			set
			{
				if ((this._Event_TrackDirection != value))
				{
					this.OnEvent_TrackDirectionChanging(value);
					this.SendPropertyChanging();
					this._Event_TrackDirection = value;
					this.SendPropertyChanged("Event_TrackDirection");
					this.OnEvent_TrackDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_DefaultDistance", DbType="Int")]
		public System.Nullable<int> Event_DefaultDistance
		{
			get
			{
				return this._Event_DefaultDistance;
			}
			set
			{
				if ((this._Event_DefaultDistance != value))
				{
					this.OnEvent_DefaultDistanceChanging(value);
					this.SendPropertyChanging();
					this._Event_DefaultDistance = value;
					this.SendPropertyChanged("Event_DefaultDistance");
					this.OnEvent_DefaultDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_DefaultRaceMode_ID_FK", DbType="Int")]
		public System.Nullable<int> Event_DefaultRaceMode_ID_FK
		{
			get
			{
				return this._Event_DefaultRaceMode_ID_FK;
			}
			set
			{
				if ((this._Event_DefaultRaceMode_ID_FK != value))
				{
					if (this._RaceMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvent_DefaultRaceMode_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Event_DefaultRaceMode_ID_FK = value;
					this.SendPropertyChanged("Event_DefaultRaceMode_ID_FK");
					this.OnEvent_DefaultRaceMode_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_HeadLogo_A", DbType="VarChar(64)")]
		public string Event_HeadLogo_A
		{
			get
			{
				return this._Event_HeadLogo_A;
			}
			set
			{
				if ((this._Event_HeadLogo_A != value))
				{
					this.OnEvent_HeadLogo_AChanging(value);
					this.SendPropertyChanging();
					this._Event_HeadLogo_A = value;
					this.SendPropertyChanged("Event_HeadLogo_A");
					this.OnEvent_HeadLogo_AChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_HeadLogo_B", DbType="VarChar(64)")]
		public string Event_HeadLogo_B
		{
			get
			{
				return this._Event_HeadLogo_B;
			}
			set
			{
				if ((this._Event_HeadLogo_B != value))
				{
					this.OnEvent_HeadLogo_BChanging(value);
					this.SendPropertyChanging();
					this._Event_HeadLogo_B = value;
					this.SendPropertyChanged("Event_HeadLogo_B");
					this.OnEvent_HeadLogo_BChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_FootLogo", DbType="VarChar(64)")]
		public string Event_FootLogo
		{
			get
			{
				return this._Event_FootLogo;
			}
			set
			{
				if ((this._Event_FootLogo != value))
				{
					this.OnEvent_FootLogoChanging(value);
					this.SendPropertyChanging();
					this._Event_FootLogo = value;
					this.SendPropertyChanged("Event_FootLogo");
					this.OnEvent_FootLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_BoardMemberA", DbType="VarChar(32)")]
		public string Event_BoardMemberA
		{
			get
			{
				return this._Event_BoardMemberA;
			}
			set
			{
				if ((this._Event_BoardMemberA != value))
				{
					this.OnEvent_BoardMemberAChanging(value);
					this.SendPropertyChanging();
					this._Event_BoardMemberA = value;
					this.SendPropertyChanged("Event_BoardMemberA");
					this.OnEvent_BoardMemberAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_BoardMemberB", DbType="VarChar(32)")]
		public string Event_BoardMemberB
		{
			get
			{
				return this._Event_BoardMemberB;
			}
			set
			{
				if ((this._Event_BoardMemberB != value))
				{
					this.OnEvent_BoardMemberBChanging(value);
					this.SendPropertyChanging();
					this._Event_BoardMemberB = value;
					this.SendPropertyChanged("Event_BoardMemberB");
					this.OnEvent_BoardMemberBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_HeadReferee_ID_FK", DbType="Int")]
		public System.Nullable<int> Event_HeadReferee_ID_FK
		{
			get
			{
				return this._Event_HeadReferee_ID_FK;
			}
			set
			{
				if ((this._Event_HeadReferee_ID_FK != value))
				{
					if (this._Referee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvent_HeadReferee_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Event_HeadReferee_ID_FK = value;
					this.SendPropertyChanged("Event_HeadReferee_ID_FK");
					this.OnEvent_HeadReferee_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Url", DbType="VarChar(64)")]
		public string Event_Url
		{
			get
			{
				return this._Event_Url;
			}
			set
			{
				if ((this._Event_Url != value))
				{
					this.OnEvent_UrlChanging(value);
					this.SendPropertyChanging();
					this._Event_Url = value;
					this.SendPropertyChanged("Event_Url");
					this.OnEvent_UrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Comp", Storage="_Comps", ThisKey="Event_ID", OtherKey="Comp_Event_ID_FK")]
		public EntitySet<Comp> Comps
		{
			get
			{
				return this._Comps;
			}
			set
			{
				this._Comps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Entry", Storage="_Entries", ThisKey="Event_ID", OtherKey="Entry_Event_ID_FK")]
		public EntitySet<Entry> Entries
		{
			get
			{
				return this._Entries;
			}
			set
			{
				this._Entries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventReferee", Storage="_EventReferees", ThisKey="Event_ID", OtherKey="ER_Event_ID_FK")]
		public EntitySet<EventReferee> EventReferees
		{
			get
			{
				return this._EventReferees;
			}
			set
			{
				this._EventReferees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Offer", Storage="_Offers", ThisKey="Event_ID", OtherKey="Offer_Event_ID_FK")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_ReportInfo", Storage="_ReportInfos", ThisKey="Event_ID", OtherKey="Report_Event_ID_FK")]
		public EntitySet<ReportInfo> ReportInfos
		{
			get
			{
				return this._ReportInfos;
			}
			set
			{
				this._ReportInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Event", Storage="_Club", ThisKey="Event_Club_ID_FK", OtherKey="Club_ID", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._Event_Club_ID_FK = value.Club_ID;
					}
					else
					{
						this._Event_Club_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nation_Event", Storage="_Nation", ThisKey="Event_Venue_Nation_ID_FK", OtherKey="Nation_ID", IsForeignKey=true)]
		public Nation Nation
		{
			get
			{
				return this._Nation.Entity;
			}
			set
			{
				Nation previousValue = this._Nation.Entity;
				if (((previousValue != value) 
							|| (this._Nation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nation.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Nation.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._Event_Venue_Nation_ID_FK = value.Nation_ID;
					}
					else
					{
						this._Event_Venue_Nation_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Nation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceMode_Event", Storage="_RaceMode", ThisKey="Event_DefaultRaceMode_ID_FK", OtherKey="RaceMode_ID", IsForeignKey=true)]
		public RaceMode RaceMode
		{
			get
			{
				return this._RaceMode.Entity;
			}
			set
			{
				RaceMode previousValue = this._RaceMode.Entity;
				if (((previousValue != value) 
							|| (this._RaceMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RaceMode.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._RaceMode.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._Event_DefaultRaceMode_ID_FK = value.RaceMode_ID;
					}
					else
					{
						this._Event_DefaultRaceMode_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("RaceMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referee_Event", Storage="_Referee", ThisKey="Event_HeadReferee_ID_FK", OtherKey="Referee_ID", IsForeignKey=true)]
		public Referee Referee
		{
			get
			{
				return this._Referee.Entity;
			}
			set
			{
				Referee previousValue = this._Referee.Entity;
				if (((previousValue != value) 
							|| (this._Referee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Referee.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Referee.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._Event_HeadReferee_ID_FK = value.Referee_ID;
					}
					else
					{
						this._Event_HeadReferee_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Referee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comps(Comp entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Comps(Comp entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_Entries(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Entries(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventReferees(EventReferee entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventReferees(EventReferee entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_ReportInfos(ReportInfo entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_ReportInfos(ReportInfo entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventReferee")]
	public partial class EventReferee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ER_Event_ID_FK;
		
		private int _ER_Referee_ID_FK;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Referee> _Referee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnER_Event_ID_FKChanging(int value);
    partial void OnER_Event_ID_FKChanged();
    partial void OnER_Referee_ID_FKChanging(int value);
    partial void OnER_Referee_ID_FKChanged();
    #endregion
		
		public EventReferee()
		{
			this._Event = default(EntityRef<Event>);
			this._Referee = default(EntityRef<Referee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ER_Event_ID_FK", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ER_Event_ID_FK
		{
			get
			{
				return this._ER_Event_ID_FK;
			}
			set
			{
				if ((this._ER_Event_ID_FK != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnER_Event_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._ER_Event_ID_FK = value;
					this.SendPropertyChanged("ER_Event_ID_FK");
					this.OnER_Event_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ER_Referee_ID_FK", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ER_Referee_ID_FK
		{
			get
			{
				return this._ER_Referee_ID_FK;
			}
			set
			{
				if ((this._ER_Referee_ID_FK != value))
				{
					if (this._Referee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnER_Referee_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._ER_Referee_ID_FK = value;
					this.SendPropertyChanged("ER_Referee_ID_FK");
					this.OnER_Referee_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventReferee", Storage="_Event", ThisKey="ER_Event_ID_FK", OtherKey="Event_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventReferees.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventReferees.Add(this);
						this._ER_Event_ID_FK = value.Event_ID;
					}
					else
					{
						this._ER_Event_ID_FK = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referee_EventReferee", Storage="_Referee", ThisKey="ER_Referee_ID_FK", OtherKey="Referee_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Referee Referee
		{
			get
			{
				return this._Referee.Entity;
			}
			set
			{
				Referee previousValue = this._Referee.Entity;
				if (((previousValue != value) 
							|| (this._Referee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Referee.Entity = null;
						previousValue.EventReferees.Remove(this);
					}
					this._Referee.Entity = value;
					if ((value != null))
					{
						value.EventReferees.Add(this);
						this._ER_Referee_ID_FK = value.Referee_ID;
					}
					else
					{
						this._ER_Referee_ID_FK = default(int);
					}
					this.SendPropertyChanged("Referee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MetaData")]
	public partial class MetaData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MetaData_Key;
		
		private string _MetaData_Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetaData_KeyChanging(string value);
    partial void OnMetaData_KeyChanged();
    partial void OnMetaData_ValueChanging(string value);
    partial void OnMetaData_ValueChanged();
    #endregion
		
		public MetaData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaData_Key", DbType="VarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MetaData_Key
		{
			get
			{
				return this._MetaData_Key;
			}
			set
			{
				if ((this._MetaData_Key != value))
				{
					this.OnMetaData_KeyChanging(value);
					this.SendPropertyChanging();
					this._MetaData_Key = value;
					this.SendPropertyChanged("MetaData_Key");
					this.OnMetaData_KeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaData_Value", DbType="VarChar(32)")]
		public string MetaData_Value
		{
			get
			{
				return this._MetaData_Value;
			}
			set
			{
				if ((this._MetaData_Value != value))
				{
					this.OnMetaData_ValueChanging(value);
					this.SendPropertyChanging();
					this._MetaData_Value = value;
					this.SendPropertyChanged("MetaData_Value");
					this.OnMetaData_ValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nation")]
	public partial class Nation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Nation_ID;
		
		private string _Nation_Name;
		
		private string _Nation_Name_German;
		
		private string _Nation_IOC_Code;
		
		private EntitySet<Athlet> _Athlets;
		
		private EntitySet<Club> _Clubs;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<Referee> _Referees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNation_IDChanging(int value);
    partial void OnNation_IDChanged();
    partial void OnNation_NameChanging(string value);
    partial void OnNation_NameChanged();
    partial void OnNation_Name_GermanChanging(string value);
    partial void OnNation_Name_GermanChanged();
    partial void OnNation_IOC_CodeChanging(string value);
    partial void OnNation_IOC_CodeChanged();
    #endregion
		
		public Nation()
		{
			this._Athlets = new EntitySet<Athlet>(new Action<Athlet>(this.attach_Athlets), new Action<Athlet>(this.detach_Athlets));
			this._Clubs = new EntitySet<Club>(new Action<Club>(this.attach_Clubs), new Action<Club>(this.detach_Clubs));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Referees = new EntitySet<Referee>(new Action<Referee>(this.attach_Referees), new Action<Referee>(this.detach_Referees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nation_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Nation_ID
		{
			get
			{
				return this._Nation_ID;
			}
			set
			{
				if ((this._Nation_ID != value))
				{
					this.OnNation_IDChanging(value);
					this.SendPropertyChanging();
					this._Nation_ID = value;
					this.SendPropertyChanged("Nation_ID");
					this.OnNation_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nation_Name", DbType="VarChar(64)")]
		public string Nation_Name
		{
			get
			{
				return this._Nation_Name;
			}
			set
			{
				if ((this._Nation_Name != value))
				{
					this.OnNation_NameChanging(value);
					this.SendPropertyChanging();
					this._Nation_Name = value;
					this.SendPropertyChanged("Nation_Name");
					this.OnNation_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nation_Name_German", DbType="VarChar(64)")]
		public string Nation_Name_German
		{
			get
			{
				return this._Nation_Name_German;
			}
			set
			{
				if ((this._Nation_Name_German != value))
				{
					this.OnNation_Name_GermanChanging(value);
					this.SendPropertyChanging();
					this._Nation_Name_German = value;
					this.SendPropertyChanged("Nation_Name_German");
					this.OnNation_Name_GermanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nation_IOC_Code", DbType="VarChar(5)")]
		public string Nation_IOC_Code
		{
			get
			{
				return this._Nation_IOC_Code;
			}
			set
			{
				if ((this._Nation_IOC_Code != value))
				{
					this.OnNation_IOC_CodeChanging(value);
					this.SendPropertyChanging();
					this._Nation_IOC_Code = value;
					this.SendPropertyChanged("Nation_IOC_Code");
					this.OnNation_IOC_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nation_Athlet", Storage="_Athlets", ThisKey="Nation_ID", OtherKey="Athlet_Nation_ID_FK")]
		public EntitySet<Athlet> Athlets
		{
			get
			{
				return this._Athlets;
			}
			set
			{
				this._Athlets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nation_Club", Storage="_Clubs", ThisKey="Nation_ID", OtherKey="Club_Nation_ID_FK")]
		public EntitySet<Club> Clubs
		{
			get
			{
				return this._Clubs;
			}
			set
			{
				this._Clubs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nation_Event", Storage="_Events", ThisKey="Nation_ID", OtherKey="Event_Venue_Nation_ID_FK")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nation_Referee", Storage="_Referees", ThisKey="Nation_ID", OtherKey="Referee_Nation_ID_FK")]
		public EntitySet<Referee> Referees
		{
			get
			{
				return this._Referees;
			}
			set
			{
				this._Referees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Athlets(Athlet entity)
		{
			this.SendPropertyChanging();
			entity.Nation = this;
		}
		
		private void detach_Athlets(Athlet entity)
		{
			this.SendPropertyChanging();
			entity.Nation = null;
		}
		
		private void attach_Clubs(Club entity)
		{
			this.SendPropertyChanging();
			entity.Nation = this;
		}
		
		private void detach_Clubs(Club entity)
		{
			this.SendPropertyChanging();
			entity.Nation = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Nation = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Nation = null;
		}
		
		private void attach_Referees(Referee entity)
		{
			this.SendPropertyChanging();
			entity.Nation = this;
		}
		
		private void detach_Referees(Referee entity)
		{
			this.SendPropertyChanging();
			entity.Nation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Offer")]
	public partial class Offer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Offer_ID;
		
		private int _Offer_Event_ID_FK;
		
		private int _Offer_AgeClass_ID_FK;
		
		private int _Offer_BoatClass_ID_FK;
		
		private string _Offer_RaceNumber;
		
		private string _Offer_LongLabel;
		
		private string _Offer_ShortLabel;
		
		private string _Offer_Comment;
		
		private System.Nullable<int> _Offer_EventDay;
		
		private short _Offer_Distance;
		
		private byte _Offer_GroupMode;
		
		private System.Nullable<int> _Offer_RaceMode_ID_FK;
		
		private System.Nullable<byte> _Offer_IsLightweight;
		
		private decimal _Offer_Fee;
		
		private System.Nullable<int> _Offer_Splits;
		
		private int _Offer_SortValue;
		
		private byte _Offer_RaceType;
		
		private System.Nullable<bool> _Offer_ForceDriven;
		
		private System.Nullable<bool> _Offer_Driven;
		
		private System.Nullable<bool> _Offer_Cancelled;
		
		private System.Nullable<short> _Offer_BibSeed;
		
		private string _Offer_Prize;
		
		private EntitySet<Comp> _Comps;
		
		private EntitySet<Cup> _Cups;
		
		private EntitySet<Entry> _Entries;
		
		private EntitySet<ReportInfo> _ReportInfos;
		
		private EntityRef<AgeClass> _AgeClass;
		
		private EntityRef<BoatClass> _BoatClass;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<RaceMode> _RaceMode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOffer_IDChanging(int value);
    partial void OnOffer_IDChanged();
    partial void OnOffer_Event_ID_FKChanging(int value);
    partial void OnOffer_Event_ID_FKChanged();
    partial void OnOffer_AgeClass_ID_FKChanging(int value);
    partial void OnOffer_AgeClass_ID_FKChanged();
    partial void OnOffer_BoatClass_ID_FKChanging(int value);
    partial void OnOffer_BoatClass_ID_FKChanged();
    partial void OnOffer_RaceNumberChanging(string value);
    partial void OnOffer_RaceNumberChanged();
    partial void OnOffer_LongLabelChanging(string value);
    partial void OnOffer_LongLabelChanged();
    partial void OnOffer_ShortLabelChanging(string value);
    partial void OnOffer_ShortLabelChanged();
    partial void OnOffer_CommentChanging(string value);
    partial void OnOffer_CommentChanged();
    partial void OnOffer_EventDayChanging(System.Nullable<int> value);
    partial void OnOffer_EventDayChanged();
    partial void OnOffer_DistanceChanging(short value);
    partial void OnOffer_DistanceChanged();
    partial void OnOffer_GroupModeChanging(byte value);
    partial void OnOffer_GroupModeChanged();
    partial void OnOffer_RaceMode_ID_FKChanging(System.Nullable<int> value);
    partial void OnOffer_RaceMode_ID_FKChanged();
    partial void OnOffer_IsLightweightChanging(System.Nullable<byte> value);
    partial void OnOffer_IsLightweightChanged();
    partial void OnOffer_FeeChanging(decimal value);
    partial void OnOffer_FeeChanged();
    partial void OnOffer_SplitsChanging(System.Nullable<int> value);
    partial void OnOffer_SplitsChanged();
    partial void OnOffer_SortValueChanging(int value);
    partial void OnOffer_SortValueChanged();
    partial void OnOffer_RaceTypeChanging(byte value);
    partial void OnOffer_RaceTypeChanged();
    partial void OnOffer_ForceDrivenChanging(System.Nullable<bool> value);
    partial void OnOffer_ForceDrivenChanged();
    partial void OnOffer_DrivenChanging(System.Nullable<bool> value);
    partial void OnOffer_DrivenChanged();
    partial void OnOffer_CancelledChanging(System.Nullable<bool> value);
    partial void OnOffer_CancelledChanged();
    partial void OnOffer_BibSeedChanging(System.Nullable<short> value);
    partial void OnOffer_BibSeedChanged();
    partial void OnOffer_PrizeChanging(string value);
    partial void OnOffer_PrizeChanged();
    #endregion
		
		public Offer()
		{
			this._Comps = new EntitySet<Comp>(new Action<Comp>(this.attach_Comps), new Action<Comp>(this.detach_Comps));
			this._Cups = new EntitySet<Cup>(new Action<Cup>(this.attach_Cups), new Action<Cup>(this.detach_Cups));
			this._Entries = new EntitySet<Entry>(new Action<Entry>(this.attach_Entries), new Action<Entry>(this.detach_Entries));
			this._ReportInfos = new EntitySet<ReportInfo>(new Action<ReportInfo>(this.attach_ReportInfos), new Action<ReportInfo>(this.detach_ReportInfos));
			this._AgeClass = default(EntityRef<AgeClass>);
			this._BoatClass = default(EntityRef<BoatClass>);
			this._Event = default(EntityRef<Event>);
			this._RaceMode = default(EntityRef<RaceMode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Offer_ID
		{
			get
			{
				return this._Offer_ID;
			}
			set
			{
				if ((this._Offer_ID != value))
				{
					this.OnOffer_IDChanging(value);
					this.SendPropertyChanging();
					this._Offer_ID = value;
					this.SendPropertyChanged("Offer_ID");
					this.OnOffer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_Event_ID_FK", DbType="Int NOT NULL")]
		public int Offer_Event_ID_FK
		{
			get
			{
				return this._Offer_Event_ID_FK;
			}
			set
			{
				if ((this._Offer_Event_ID_FK != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOffer_Event_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Offer_Event_ID_FK = value;
					this.SendPropertyChanged("Offer_Event_ID_FK");
					this.OnOffer_Event_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_AgeClass_ID_FK", DbType="Int NOT NULL")]
		public int Offer_AgeClass_ID_FK
		{
			get
			{
				return this._Offer_AgeClass_ID_FK;
			}
			set
			{
				if ((this._Offer_AgeClass_ID_FK != value))
				{
					if (this._AgeClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOffer_AgeClass_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Offer_AgeClass_ID_FK = value;
					this.SendPropertyChanged("Offer_AgeClass_ID_FK");
					this.OnOffer_AgeClass_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_BoatClass_ID_FK", DbType="Int NOT NULL")]
		public int Offer_BoatClass_ID_FK
		{
			get
			{
				return this._Offer_BoatClass_ID_FK;
			}
			set
			{
				if ((this._Offer_BoatClass_ID_FK != value))
				{
					if (this._BoatClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOffer_BoatClass_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Offer_BoatClass_ID_FK = value;
					this.SendPropertyChanged("Offer_BoatClass_ID_FK");
					this.OnOffer_BoatClass_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_RaceNumber", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string Offer_RaceNumber
		{
			get
			{
				return this._Offer_RaceNumber;
			}
			set
			{
				if ((this._Offer_RaceNumber != value))
				{
					this.OnOffer_RaceNumberChanging(value);
					this.SendPropertyChanging();
					this._Offer_RaceNumber = value;
					this.SendPropertyChanged("Offer_RaceNumber");
					this.OnOffer_RaceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_LongLabel", DbType="VarChar(64)")]
		public string Offer_LongLabel
		{
			get
			{
				return this._Offer_LongLabel;
			}
			set
			{
				if ((this._Offer_LongLabel != value))
				{
					this.OnOffer_LongLabelChanging(value);
					this.SendPropertyChanging();
					this._Offer_LongLabel = value;
					this.SendPropertyChanged("Offer_LongLabel");
					this.OnOffer_LongLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_ShortLabel", DbType="VarChar(32)")]
		public string Offer_ShortLabel
		{
			get
			{
				return this._Offer_ShortLabel;
			}
			set
			{
				if ((this._Offer_ShortLabel != value))
				{
					this.OnOffer_ShortLabelChanging(value);
					this.SendPropertyChanging();
					this._Offer_ShortLabel = value;
					this.SendPropertyChanged("Offer_ShortLabel");
					this.OnOffer_ShortLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_Comment", DbType="VarChar(32)")]
		public string Offer_Comment
		{
			get
			{
				return this._Offer_Comment;
			}
			set
			{
				if ((this._Offer_Comment != value))
				{
					this.OnOffer_CommentChanging(value);
					this.SendPropertyChanging();
					this._Offer_Comment = value;
					this.SendPropertyChanged("Offer_Comment");
					this.OnOffer_CommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_EventDay", DbType="Int")]
		public System.Nullable<int> Offer_EventDay
		{
			get
			{
				return this._Offer_EventDay;
			}
			set
			{
				if ((this._Offer_EventDay != value))
				{
					this.OnOffer_EventDayChanging(value);
					this.SendPropertyChanging();
					this._Offer_EventDay = value;
					this.SendPropertyChanged("Offer_EventDay");
					this.OnOffer_EventDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_Distance", DbType="SmallInt NOT NULL")]
		public short Offer_Distance
		{
			get
			{
				return this._Offer_Distance;
			}
			set
			{
				if ((this._Offer_Distance != value))
				{
					this.OnOffer_DistanceChanging(value);
					this.SendPropertyChanging();
					this._Offer_Distance = value;
					this.SendPropertyChanged("Offer_Distance");
					this.OnOffer_DistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_GroupMode", DbType="TinyInt NOT NULL")]
		public byte Offer_GroupMode
		{
			get
			{
				return this._Offer_GroupMode;
			}
			set
			{
				if ((this._Offer_GroupMode != value))
				{
					this.OnOffer_GroupModeChanging(value);
					this.SendPropertyChanging();
					this._Offer_GroupMode = value;
					this.SendPropertyChanged("Offer_GroupMode");
					this.OnOffer_GroupModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_RaceMode_ID_FK", DbType="Int")]
		public System.Nullable<int> Offer_RaceMode_ID_FK
		{
			get
			{
				return this._Offer_RaceMode_ID_FK;
			}
			set
			{
				if ((this._Offer_RaceMode_ID_FK != value))
				{
					if (this._RaceMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOffer_RaceMode_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Offer_RaceMode_ID_FK = value;
					this.SendPropertyChanged("Offer_RaceMode_ID_FK");
					this.OnOffer_RaceMode_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_IsLightweight", DbType="TinyInt")]
		public System.Nullable<byte> Offer_IsLightweight
		{
			get
			{
				return this._Offer_IsLightweight;
			}
			set
			{
				if ((this._Offer_IsLightweight != value))
				{
					this.OnOffer_IsLightweightChanging(value);
					this.SendPropertyChanging();
					this._Offer_IsLightweight = value;
					this.SendPropertyChanged("Offer_IsLightweight");
					this.OnOffer_IsLightweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_Fee", DbType="SmallMoney NOT NULL")]
		public decimal Offer_Fee
		{
			get
			{
				return this._Offer_Fee;
			}
			set
			{
				if ((this._Offer_Fee != value))
				{
					this.OnOffer_FeeChanging(value);
					this.SendPropertyChanging();
					this._Offer_Fee = value;
					this.SendPropertyChanged("Offer_Fee");
					this.OnOffer_FeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_Splits", DbType="Int")]
		public System.Nullable<int> Offer_Splits
		{
			get
			{
				return this._Offer_Splits;
			}
			set
			{
				if ((this._Offer_Splits != value))
				{
					this.OnOffer_SplitsChanging(value);
					this.SendPropertyChanging();
					this._Offer_Splits = value;
					this.SendPropertyChanged("Offer_Splits");
					this.OnOffer_SplitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_SortValue", DbType="Int NOT NULL")]
		public int Offer_SortValue
		{
			get
			{
				return this._Offer_SortValue;
			}
			set
			{
				if ((this._Offer_SortValue != value))
				{
					this.OnOffer_SortValueChanging(value);
					this.SendPropertyChanging();
					this._Offer_SortValue = value;
					this.SendPropertyChanged("Offer_SortValue");
					this.OnOffer_SortValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_RaceType", DbType="TinyInt NOT NULL")]
		public byte Offer_RaceType
		{
			get
			{
				return this._Offer_RaceType;
			}
			set
			{
				if ((this._Offer_RaceType != value))
				{
					this.OnOffer_RaceTypeChanging(value);
					this.SendPropertyChanging();
					this._Offer_RaceType = value;
					this.SendPropertyChanged("Offer_RaceType");
					this.OnOffer_RaceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_ForceDriven", DbType="Bit")]
		public System.Nullable<bool> Offer_ForceDriven
		{
			get
			{
				return this._Offer_ForceDriven;
			}
			set
			{
				if ((this._Offer_ForceDriven != value))
				{
					this.OnOffer_ForceDrivenChanging(value);
					this.SendPropertyChanging();
					this._Offer_ForceDriven = value;
					this.SendPropertyChanged("Offer_ForceDriven");
					this.OnOffer_ForceDrivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_Driven", DbType="Bit")]
		public System.Nullable<bool> Offer_Driven
		{
			get
			{
				return this._Offer_Driven;
			}
			set
			{
				if ((this._Offer_Driven != value))
				{
					this.OnOffer_DrivenChanging(value);
					this.SendPropertyChanging();
					this._Offer_Driven = value;
					this.SendPropertyChanged("Offer_Driven");
					this.OnOffer_DrivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_Cancelled", DbType="Bit")]
		public System.Nullable<bool> Offer_Cancelled
		{
			get
			{
				return this._Offer_Cancelled;
			}
			set
			{
				if ((this._Offer_Cancelled != value))
				{
					this.OnOffer_CancelledChanging(value);
					this.SendPropertyChanging();
					this._Offer_Cancelled = value;
					this.SendPropertyChanged("Offer_Cancelled");
					this.OnOffer_CancelledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_BibSeed", DbType="SmallInt")]
		public System.Nullable<short> Offer_BibSeed
		{
			get
			{
				return this._Offer_BibSeed;
			}
			set
			{
				if ((this._Offer_BibSeed != value))
				{
					this.OnOffer_BibSeedChanging(value);
					this.SendPropertyChanging();
					this._Offer_BibSeed = value;
					this.SendPropertyChanged("Offer_BibSeed");
					this.OnOffer_BibSeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer_Prize", DbType="VarChar(128)")]
		public string Offer_Prize
		{
			get
			{
				return this._Offer_Prize;
			}
			set
			{
				if ((this._Offer_Prize != value))
				{
					this.OnOffer_PrizeChanging(value);
					this.SendPropertyChanging();
					this._Offer_Prize = value;
					this.SendPropertyChanged("Offer_Prize");
					this.OnOffer_PrizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offer_Comp", Storage="_Comps", ThisKey="Offer_ID", OtherKey="Comp_Race_ID_FK")]
		public EntitySet<Comp> Comps
		{
			get
			{
				return this._Comps;
			}
			set
			{
				this._Comps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offer_Cup", Storage="_Cups", ThisKey="Offer_ID", OtherKey="Race_ID_FK")]
		public EntitySet<Cup> Cups
		{
			get
			{
				return this._Cups;
			}
			set
			{
				this._Cups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offer_Entry", Storage="_Entries", ThisKey="Offer_ID", OtherKey="Entry_Race_ID_FK")]
		public EntitySet<Entry> Entries
		{
			get
			{
				return this._Entries;
			}
			set
			{
				this._Entries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offer_ReportInfo", Storage="_ReportInfos", ThisKey="Offer_ID", OtherKey="Report_Race_ID_FK")]
		public EntitySet<ReportInfo> ReportInfos
		{
			get
			{
				return this._ReportInfos;
			}
			set
			{
				this._ReportInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgeClass_Offer", Storage="_AgeClass", ThisKey="Offer_AgeClass_ID_FK", OtherKey="AgeClass_ID", IsForeignKey=true)]
		public AgeClass AgeClass
		{
			get
			{
				return this._AgeClass.Entity;
			}
			set
			{
				AgeClass previousValue = this._AgeClass.Entity;
				if (((previousValue != value) 
							|| (this._AgeClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AgeClass.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._AgeClass.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._Offer_AgeClass_ID_FK = value.AgeClass_ID;
					}
					else
					{
						this._Offer_AgeClass_ID_FK = default(int);
					}
					this.SendPropertyChanged("AgeClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoatClass_Offer", Storage="_BoatClass", ThisKey="Offer_BoatClass_ID_FK", OtherKey="BoatClass_ID", IsForeignKey=true)]
		public BoatClass BoatClass
		{
			get
			{
				return this._BoatClass.Entity;
			}
			set
			{
				BoatClass previousValue = this._BoatClass.Entity;
				if (((previousValue != value) 
							|| (this._BoatClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoatClass.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._BoatClass.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._Offer_BoatClass_ID_FK = value.BoatClass_ID;
					}
					else
					{
						this._Offer_BoatClass_ID_FK = default(int);
					}
					this.SendPropertyChanged("BoatClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Offer", Storage="_Event", ThisKey="Offer_Event_ID_FK", OtherKey="Event_ID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._Offer_Event_ID_FK = value.Event_ID;
					}
					else
					{
						this._Offer_Event_ID_FK = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceMode_Offer", Storage="_RaceMode", ThisKey="Offer_RaceMode_ID_FK", OtherKey="RaceMode_ID", IsForeignKey=true)]
		public RaceMode RaceMode
		{
			get
			{
				return this._RaceMode.Entity;
			}
			set
			{
				RaceMode previousValue = this._RaceMode.Entity;
				if (((previousValue != value) 
							|| (this._RaceMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RaceMode.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._RaceMode.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._Offer_RaceMode_ID_FK = value.RaceMode_ID;
					}
					else
					{
						this._Offer_RaceMode_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("RaceMode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comps(Comp entity)
		{
			this.SendPropertyChanging();
			entity.Offer = this;
		}
		
		private void detach_Comps(Comp entity)
		{
			this.SendPropertyChanging();
			entity.Offer = null;
		}
		
		private void attach_Cups(Cup entity)
		{
			this.SendPropertyChanging();
			entity.Offer = this;
		}
		
		private void detach_Cups(Cup entity)
		{
			this.SendPropertyChanging();
			entity.Offer = null;
		}
		
		private void attach_Entries(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Offer = this;
		}
		
		private void detach_Entries(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Offer = null;
		}
		
		private void attach_ReportInfos(ReportInfo entity)
		{
			this.SendPropertyChanging();
			entity.Offer = this;
		}
		
		private void detach_ReportInfos(ReportInfo entity)
		{
			this.SendPropertyChanging();
			entity.Offer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RaceMode")]
	public partial class RaceMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceMode_ID;
		
		private string _RaceMode_Title;
		
		private short _RaceMode_LaneCount;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<Offer> _Offers;
		
		private EntitySet<RaceMode_Range> _RaceMode_Ranges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceMode_IDChanging(int value);
    partial void OnRaceMode_IDChanged();
    partial void OnRaceMode_TitleChanging(string value);
    partial void OnRaceMode_TitleChanged();
    partial void OnRaceMode_LaneCountChanging(short value);
    partial void OnRaceMode_LaneCountChanged();
    #endregion
		
		public RaceMode()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			this._RaceMode_Ranges = new EntitySet<RaceMode_Range>(new Action<RaceMode_Range>(this.attach_RaceMode_Ranges), new Action<RaceMode_Range>(this.detach_RaceMode_Ranges));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceMode_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RaceMode_ID
		{
			get
			{
				return this._RaceMode_ID;
			}
			set
			{
				if ((this._RaceMode_ID != value))
				{
					this.OnRaceMode_IDChanging(value);
					this.SendPropertyChanging();
					this._RaceMode_ID = value;
					this.SendPropertyChanged("RaceMode_ID");
					this.OnRaceMode_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceMode_Title", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string RaceMode_Title
		{
			get
			{
				return this._RaceMode_Title;
			}
			set
			{
				if ((this._RaceMode_Title != value))
				{
					this.OnRaceMode_TitleChanging(value);
					this.SendPropertyChanging();
					this._RaceMode_Title = value;
					this.SendPropertyChanged("RaceMode_Title");
					this.OnRaceMode_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceMode_LaneCount", DbType="SmallInt NOT NULL")]
		public short RaceMode_LaneCount
		{
			get
			{
				return this._RaceMode_LaneCount;
			}
			set
			{
				if ((this._RaceMode_LaneCount != value))
				{
					this.OnRaceMode_LaneCountChanging(value);
					this.SendPropertyChanging();
					this._RaceMode_LaneCount = value;
					this.SendPropertyChanged("RaceMode_LaneCount");
					this.OnRaceMode_LaneCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceMode_Event", Storage="_Events", ThisKey="RaceMode_ID", OtherKey="Event_DefaultRaceMode_ID_FK")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceMode_Offer", Storage="_Offers", ThisKey="RaceMode_ID", OtherKey="Offer_RaceMode_ID_FK")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceMode_RaceMode_Range", Storage="_RaceMode_Ranges", ThisKey="RaceMode_ID", OtherKey="RMRange_RM_ID_FK")]
		public EntitySet<RaceMode_Range> RaceMode_Ranges
		{
			get
			{
				return this._RaceMode_Ranges;
			}
			set
			{
				this._RaceMode_Ranges.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.RaceMode = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.RaceMode = null;
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.RaceMode = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.RaceMode = null;
		}
		
		private void attach_RaceMode_Ranges(RaceMode_Range entity)
		{
			this.SendPropertyChanging();
			entity.RaceMode = this;
		}
		
		private void detach_RaceMode_Ranges(RaceMode_Range entity)
		{
			this.SendPropertyChanging();
			entity.RaceMode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RaceMode_Detail")]
	public partial class RaceMode_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RMLap_ID;
		
		private int _RMLap_Range_ID_FK;
		
		private int _RMLap_Round;
		
		private System.Nullable<short> _RMLap_Number;
		
		private string _RMLap_Code;
		
		private string _RMLap_Label;
		
		private string _RMLap_QRText;
		
		private EntitySet<Comp> _Comps;
		
		private EntityRef<RaceMode_Range> _RaceMode_Range;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRMLap_IDChanging(int value);
    partial void OnRMLap_IDChanged();
    partial void OnRMLap_Range_ID_FKChanging(int value);
    partial void OnRMLap_Range_ID_FKChanged();
    partial void OnRMLap_RoundChanging(int value);
    partial void OnRMLap_RoundChanged();
    partial void OnRMLap_NumberChanging(System.Nullable<short> value);
    partial void OnRMLap_NumberChanged();
    partial void OnRMLap_CodeChanging(string value);
    partial void OnRMLap_CodeChanged();
    partial void OnRMLap_LabelChanging(string value);
    partial void OnRMLap_LabelChanged();
    partial void OnRMLap_QRTextChanging(string value);
    partial void OnRMLap_QRTextChanged();
    #endregion
		
		public RaceMode_Detail()
		{
			this._Comps = new EntitySet<Comp>(new Action<Comp>(this.attach_Comps), new Action<Comp>(this.detach_Comps));
			this._RaceMode_Range = default(EntityRef<RaceMode_Range>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RMLap_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RMLap_ID
		{
			get
			{
				return this._RMLap_ID;
			}
			set
			{
				if ((this._RMLap_ID != value))
				{
					this.OnRMLap_IDChanging(value);
					this.SendPropertyChanging();
					this._RMLap_ID = value;
					this.SendPropertyChanged("RMLap_ID");
					this.OnRMLap_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RMLap_Range_ID_FK", DbType="Int NOT NULL")]
		public int RMLap_Range_ID_FK
		{
			get
			{
				return this._RMLap_Range_ID_FK;
			}
			set
			{
				if ((this._RMLap_Range_ID_FK != value))
				{
					if (this._RaceMode_Range.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRMLap_Range_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._RMLap_Range_ID_FK = value;
					this.SendPropertyChanged("RMLap_Range_ID_FK");
					this.OnRMLap_Range_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RMLap_Round", DbType="Int NOT NULL")]
		public int RMLap_Round
		{
			get
			{
				return this._RMLap_Round;
			}
			set
			{
				if ((this._RMLap_Round != value))
				{
					this.OnRMLap_RoundChanging(value);
					this.SendPropertyChanging();
					this._RMLap_Round = value;
					this.SendPropertyChanged("RMLap_Round");
					this.OnRMLap_RoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RMLap_Number", DbType="SmallInt")]
		public System.Nullable<short> RMLap_Number
		{
			get
			{
				return this._RMLap_Number;
			}
			set
			{
				if ((this._RMLap_Number != value))
				{
					this.OnRMLap_NumberChanging(value);
					this.SendPropertyChanging();
					this._RMLap_Number = value;
					this.SendPropertyChanged("RMLap_Number");
					this.OnRMLap_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RMLap_Code", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string RMLap_Code
		{
			get
			{
				return this._RMLap_Code;
			}
			set
			{
				if ((this._RMLap_Code != value))
				{
					this.OnRMLap_CodeChanging(value);
					this.SendPropertyChanging();
					this._RMLap_Code = value;
					this.SendPropertyChanged("RMLap_Code");
					this.OnRMLap_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RMLap_Label", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string RMLap_Label
		{
			get
			{
				return this._RMLap_Label;
			}
			set
			{
				if ((this._RMLap_Label != value))
				{
					this.OnRMLap_LabelChanging(value);
					this.SendPropertyChanging();
					this._RMLap_Label = value;
					this.SendPropertyChanged("RMLap_Label");
					this.OnRMLap_LabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RMLap_QRText", DbType="VarChar(64)")]
		public string RMLap_QRText
		{
			get
			{
				return this._RMLap_QRText;
			}
			set
			{
				if ((this._RMLap_QRText != value))
				{
					this.OnRMLap_QRTextChanging(value);
					this.SendPropertyChanging();
					this._RMLap_QRText = value;
					this.SendPropertyChanged("RMLap_QRText");
					this.OnRMLap_QRTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceMode_Detail_Comp", Storage="_Comps", ThisKey="RMLap_ID", OtherKey="Comp_RMDetail_ID_FK")]
		public EntitySet<Comp> Comps
		{
			get
			{
				return this._Comps;
			}
			set
			{
				this._Comps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceMode_Range_RaceMode_Detail", Storage="_RaceMode_Range", ThisKey="RMLap_Range_ID_FK", OtherKey="RMRange_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RaceMode_Range RaceMode_Range
		{
			get
			{
				return this._RaceMode_Range.Entity;
			}
			set
			{
				RaceMode_Range previousValue = this._RaceMode_Range.Entity;
				if (((previousValue != value) 
							|| (this._RaceMode_Range.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RaceMode_Range.Entity = null;
						previousValue.RaceMode_Details.Remove(this);
					}
					this._RaceMode_Range.Entity = value;
					if ((value != null))
					{
						value.RaceMode_Details.Add(this);
						this._RMLap_Range_ID_FK = value.RMRange_ID;
					}
					else
					{
						this._RMLap_Range_ID_FK = default(int);
					}
					this.SendPropertyChanged("RaceMode_Range");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comps(Comp entity)
		{
			this.SendPropertyChanging();
			entity.RaceMode_Detail = this;
		}
		
		private void detach_Comps(Comp entity)
		{
			this.SendPropertyChanging();
			entity.RaceMode_Detail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RaceMode_Range")]
	public partial class RaceMode_Range : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RMRange_ID;
		
		private int _RMRange_RM_ID_FK;
		
		private int _RMRange_From;
		
		private int _RMRange_To;
		
		private EntitySet<RaceMode_Detail> _RaceMode_Details;
		
		private EntityRef<RaceMode> _RaceMode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRMRange_IDChanging(int value);
    partial void OnRMRange_IDChanged();
    partial void OnRMRange_RM_ID_FKChanging(int value);
    partial void OnRMRange_RM_ID_FKChanged();
    partial void OnRMRange_FromChanging(int value);
    partial void OnRMRange_FromChanged();
    partial void OnRMRange_ToChanging(int value);
    partial void OnRMRange_ToChanged();
    #endregion
		
		public RaceMode_Range()
		{
			this._RaceMode_Details = new EntitySet<RaceMode_Detail>(new Action<RaceMode_Detail>(this.attach_RaceMode_Details), new Action<RaceMode_Detail>(this.detach_RaceMode_Details));
			this._RaceMode = default(EntityRef<RaceMode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RMRange_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RMRange_ID
		{
			get
			{
				return this._RMRange_ID;
			}
			set
			{
				if ((this._RMRange_ID != value))
				{
					this.OnRMRange_IDChanging(value);
					this.SendPropertyChanging();
					this._RMRange_ID = value;
					this.SendPropertyChanged("RMRange_ID");
					this.OnRMRange_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RMRange_RM_ID_FK", DbType="Int NOT NULL")]
		public int RMRange_RM_ID_FK
		{
			get
			{
				return this._RMRange_RM_ID_FK;
			}
			set
			{
				if ((this._RMRange_RM_ID_FK != value))
				{
					if (this._RaceMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRMRange_RM_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._RMRange_RM_ID_FK = value;
					this.SendPropertyChanged("RMRange_RM_ID_FK");
					this.OnRMRange_RM_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RMRange_From", DbType="Int NOT NULL")]
		public int RMRange_From
		{
			get
			{
				return this._RMRange_From;
			}
			set
			{
				if ((this._RMRange_From != value))
				{
					this.OnRMRange_FromChanging(value);
					this.SendPropertyChanging();
					this._RMRange_From = value;
					this.SendPropertyChanged("RMRange_From");
					this.OnRMRange_FromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RMRange_To", DbType="Int NOT NULL")]
		public int RMRange_To
		{
			get
			{
				return this._RMRange_To;
			}
			set
			{
				if ((this._RMRange_To != value))
				{
					this.OnRMRange_ToChanging(value);
					this.SendPropertyChanging();
					this._RMRange_To = value;
					this.SendPropertyChanged("RMRange_To");
					this.OnRMRange_ToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceMode_Range_RaceMode_Detail", Storage="_RaceMode_Details", ThisKey="RMRange_ID", OtherKey="RMLap_Range_ID_FK")]
		public EntitySet<RaceMode_Detail> RaceMode_Details
		{
			get
			{
				return this._RaceMode_Details;
			}
			set
			{
				this._RaceMode_Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceMode_RaceMode_Range", Storage="_RaceMode", ThisKey="RMRange_RM_ID_FK", OtherKey="RaceMode_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RaceMode RaceMode
		{
			get
			{
				return this._RaceMode.Entity;
			}
			set
			{
				RaceMode previousValue = this._RaceMode.Entity;
				if (((previousValue != value) 
							|| (this._RaceMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RaceMode.Entity = null;
						previousValue.RaceMode_Ranges.Remove(this);
					}
					this._RaceMode.Entity = value;
					if ((value != null))
					{
						value.RaceMode_Ranges.Add(this);
						this._RMRange_RM_ID_FK = value.RaceMode_ID;
					}
					else
					{
						this._RMRange_RM_ID_FK = default(int);
					}
					this.SendPropertyChanged("RaceMode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RaceMode_Details(RaceMode_Detail entity)
		{
			this.SendPropertyChanging();
			entity.RaceMode_Range = this;
		}
		
		private void detach_RaceMode_Details(RaceMode_Detail entity)
		{
			this.SendPropertyChanging();
			entity.RaceMode_Range = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Referee")]
	public partial class Referee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Referee_ID;
		
		private string _Referee_FirstName;
		
		private string _Referee_LastName;
		
		private string _Referee_City;
		
		private System.Nullable<int> _Referee_Nation_ID_FK;
		
		private byte _Referee_LicenceState;
		
		private System.Nullable<int> _Referee_ExternID;
		
		private EntitySet<CompReferee> _CompReferees;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<EventReferee> _EventReferees;
		
		private EntityRef<Nation> _Nation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferee_IDChanging(int value);
    partial void OnReferee_IDChanged();
    partial void OnReferee_FirstNameChanging(string value);
    partial void OnReferee_FirstNameChanged();
    partial void OnReferee_LastNameChanging(string value);
    partial void OnReferee_LastNameChanged();
    partial void OnReferee_CityChanging(string value);
    partial void OnReferee_CityChanged();
    partial void OnReferee_Nation_ID_FKChanging(System.Nullable<int> value);
    partial void OnReferee_Nation_ID_FKChanged();
    partial void OnReferee_LicenceStateChanging(byte value);
    partial void OnReferee_LicenceStateChanged();
    partial void OnReferee_ExternIDChanging(System.Nullable<int> value);
    partial void OnReferee_ExternIDChanged();
    #endregion
		
		public Referee()
		{
			this._CompReferees = new EntitySet<CompReferee>(new Action<CompReferee>(this.attach_CompReferees), new Action<CompReferee>(this.detach_CompReferees));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._EventReferees = new EntitySet<EventReferee>(new Action<EventReferee>(this.attach_EventReferees), new Action<EventReferee>(this.detach_EventReferees));
			this._Nation = default(EntityRef<Nation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referee_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Referee_ID
		{
			get
			{
				return this._Referee_ID;
			}
			set
			{
				if ((this._Referee_ID != value))
				{
					this.OnReferee_IDChanging(value);
					this.SendPropertyChanging();
					this._Referee_ID = value;
					this.SendPropertyChanged("Referee_ID");
					this.OnReferee_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referee_FirstName", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Referee_FirstName
		{
			get
			{
				return this._Referee_FirstName;
			}
			set
			{
				if ((this._Referee_FirstName != value))
				{
					this.OnReferee_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Referee_FirstName = value;
					this.SendPropertyChanged("Referee_FirstName");
					this.OnReferee_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referee_LastName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Referee_LastName
		{
			get
			{
				return this._Referee_LastName;
			}
			set
			{
				if ((this._Referee_LastName != value))
				{
					this.OnReferee_LastNameChanging(value);
					this.SendPropertyChanging();
					this._Referee_LastName = value;
					this.SendPropertyChanged("Referee_LastName");
					this.OnReferee_LastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referee_City", DbType="VarChar(32)")]
		public string Referee_City
		{
			get
			{
				return this._Referee_City;
			}
			set
			{
				if ((this._Referee_City != value))
				{
					this.OnReferee_CityChanging(value);
					this.SendPropertyChanging();
					this._Referee_City = value;
					this.SendPropertyChanged("Referee_City");
					this.OnReferee_CityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referee_Nation_ID_FK", DbType="Int")]
		public System.Nullable<int> Referee_Nation_ID_FK
		{
			get
			{
				return this._Referee_Nation_ID_FK;
			}
			set
			{
				if ((this._Referee_Nation_ID_FK != value))
				{
					if (this._Nation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferee_Nation_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Referee_Nation_ID_FK = value;
					this.SendPropertyChanged("Referee_Nation_ID_FK");
					this.OnReferee_Nation_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referee_LicenceState", DbType="TinyInt NOT NULL")]
		public byte Referee_LicenceState
		{
			get
			{
				return this._Referee_LicenceState;
			}
			set
			{
				if ((this._Referee_LicenceState != value))
				{
					this.OnReferee_LicenceStateChanging(value);
					this.SendPropertyChanging();
					this._Referee_LicenceState = value;
					this.SendPropertyChanged("Referee_LicenceState");
					this.OnReferee_LicenceStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referee_ExternID", DbType="Int")]
		public System.Nullable<int> Referee_ExternID
		{
			get
			{
				return this._Referee_ExternID;
			}
			set
			{
				if ((this._Referee_ExternID != value))
				{
					this.OnReferee_ExternIDChanging(value);
					this.SendPropertyChanging();
					this._Referee_ExternID = value;
					this.SendPropertyChanged("Referee_ExternID");
					this.OnReferee_ExternIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referee_CompReferee", Storage="_CompReferees", ThisKey="Referee_ID", OtherKey="CompReferee_Referee_ID_FK")]
		public EntitySet<CompReferee> CompReferees
		{
			get
			{
				return this._CompReferees;
			}
			set
			{
				this._CompReferees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referee_Event", Storage="_Events", ThisKey="Referee_ID", OtherKey="Event_HeadReferee_ID_FK")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referee_EventReferee", Storage="_EventReferees", ThisKey="Referee_ID", OtherKey="ER_Referee_ID_FK")]
		public EntitySet<EventReferee> EventReferees
		{
			get
			{
				return this._EventReferees;
			}
			set
			{
				this._EventReferees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nation_Referee", Storage="_Nation", ThisKey="Referee_Nation_ID_FK", OtherKey="Nation_ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Nation Nation
		{
			get
			{
				return this._Nation.Entity;
			}
			set
			{
				Nation previousValue = this._Nation.Entity;
				if (((previousValue != value) 
							|| (this._Nation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nation.Entity = null;
						previousValue.Referees.Remove(this);
					}
					this._Nation.Entity = value;
					if ((value != null))
					{
						value.Referees.Add(this);
						this._Referee_Nation_ID_FK = value.Nation_ID;
					}
					else
					{
						this._Referee_Nation_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Nation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompReferees(CompReferee entity)
		{
			this.SendPropertyChanging();
			entity.Referee = this;
		}
		
		private void detach_CompReferees(CompReferee entity)
		{
			this.SendPropertyChanging();
			entity.Referee = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Referee = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Referee = null;
		}
		
		private void attach_EventReferees(EventReferee entity)
		{
			this.SendPropertyChanging();
			entity.Referee = this;
		}
		
		private void detach_EventReferees(EventReferee entity)
		{
			this.SendPropertyChanging();
			entity.Referee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportInfo")]
	public partial class ReportInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportInfo_ID;
		
		private string _Report_Code;
		
		private System.Nullable<int> _Report_Event_ID_FK;
		
		private System.Nullable<System.DateTime> _Report_Date;
		
		private System.Nullable<int> _Report_Race_ID_FK;
		
		private System.Nullable<byte> _Report_Round;
		
		private System.Nullable<int> _Report_Comp_ID_FK;
		
		private string _Report_Backend;
		
		private System.Nullable<byte> _Report_VersionMajor;
		
		private System.Nullable<byte> _Report_VersionMinor;
		
		private System.Nullable<System.DateTime> _Report_Generated;
		
		private EntityRef<Comp> _Comp;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Offer> _Offer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportInfo_IDChanging(int value);
    partial void OnReportInfo_IDChanged();
    partial void OnReport_CodeChanging(string value);
    partial void OnReport_CodeChanged();
    partial void OnReport_Event_ID_FKChanging(System.Nullable<int> value);
    partial void OnReport_Event_ID_FKChanged();
    partial void OnReport_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnReport_DateChanged();
    partial void OnReport_Race_ID_FKChanging(System.Nullable<int> value);
    partial void OnReport_Race_ID_FKChanged();
    partial void OnReport_RoundChanging(System.Nullable<byte> value);
    partial void OnReport_RoundChanged();
    partial void OnReport_Comp_ID_FKChanging(System.Nullable<int> value);
    partial void OnReport_Comp_ID_FKChanged();
    partial void OnReport_BackendChanging(string value);
    partial void OnReport_BackendChanged();
    partial void OnReport_VersionMajorChanging(System.Nullable<byte> value);
    partial void OnReport_VersionMajorChanged();
    partial void OnReport_VersionMinorChanging(System.Nullable<byte> value);
    partial void OnReport_VersionMinorChanged();
    partial void OnReport_GeneratedChanging(System.Nullable<System.DateTime> value);
    partial void OnReport_GeneratedChanged();
    #endregion
		
		public ReportInfo()
		{
			this._Comp = default(EntityRef<Comp>);
			this._Event = default(EntityRef<Event>);
			this._Offer = default(EntityRef<Offer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportInfo_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportInfo_ID
		{
			get
			{
				return this._ReportInfo_ID;
			}
			set
			{
				if ((this._ReportInfo_ID != value))
				{
					this.OnReportInfo_IDChanging(value);
					this.SendPropertyChanging();
					this._ReportInfo_ID = value;
					this.SendPropertyChanged("ReportInfo_ID");
					this.OnReportInfo_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_Code", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string Report_Code
		{
			get
			{
				return this._Report_Code;
			}
			set
			{
				if ((this._Report_Code != value))
				{
					this.OnReport_CodeChanging(value);
					this.SendPropertyChanging();
					this._Report_Code = value;
					this.SendPropertyChanged("Report_Code");
					this.OnReport_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_Event_ID_FK", DbType="Int")]
		public System.Nullable<int> Report_Event_ID_FK
		{
			get
			{
				return this._Report_Event_ID_FK;
			}
			set
			{
				if ((this._Report_Event_ID_FK != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReport_Event_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Report_Event_ID_FK = value;
					this.SendPropertyChanged("Report_Event_ID_FK");
					this.OnReport_Event_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Report_Date
		{
			get
			{
				return this._Report_Date;
			}
			set
			{
				if ((this._Report_Date != value))
				{
					this.OnReport_DateChanging(value);
					this.SendPropertyChanging();
					this._Report_Date = value;
					this.SendPropertyChanged("Report_Date");
					this.OnReport_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_Race_ID_FK", DbType="Int")]
		public System.Nullable<int> Report_Race_ID_FK
		{
			get
			{
				return this._Report_Race_ID_FK;
			}
			set
			{
				if ((this._Report_Race_ID_FK != value))
				{
					if (this._Offer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReport_Race_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Report_Race_ID_FK = value;
					this.SendPropertyChanged("Report_Race_ID_FK");
					this.OnReport_Race_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_Round", DbType="TinyInt")]
		public System.Nullable<byte> Report_Round
		{
			get
			{
				return this._Report_Round;
			}
			set
			{
				if ((this._Report_Round != value))
				{
					this.OnReport_RoundChanging(value);
					this.SendPropertyChanging();
					this._Report_Round = value;
					this.SendPropertyChanged("Report_Round");
					this.OnReport_RoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_Comp_ID_FK", DbType="Int")]
		public System.Nullable<int> Report_Comp_ID_FK
		{
			get
			{
				return this._Report_Comp_ID_FK;
			}
			set
			{
				if ((this._Report_Comp_ID_FK != value))
				{
					if (this._Comp.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReport_Comp_ID_FKChanging(value);
					this.SendPropertyChanging();
					this._Report_Comp_ID_FK = value;
					this.SendPropertyChanged("Report_Comp_ID_FK");
					this.OnReport_Comp_ID_FKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_Backend", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string Report_Backend
		{
			get
			{
				return this._Report_Backend;
			}
			set
			{
				if ((this._Report_Backend != value))
				{
					this.OnReport_BackendChanging(value);
					this.SendPropertyChanging();
					this._Report_Backend = value;
					this.SendPropertyChanged("Report_Backend");
					this.OnReport_BackendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_VersionMajor", DbType="TinyInt")]
		public System.Nullable<byte> Report_VersionMajor
		{
			get
			{
				return this._Report_VersionMajor;
			}
			set
			{
				if ((this._Report_VersionMajor != value))
				{
					this.OnReport_VersionMajorChanging(value);
					this.SendPropertyChanging();
					this._Report_VersionMajor = value;
					this.SendPropertyChanged("Report_VersionMajor");
					this.OnReport_VersionMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_VersionMinor", DbType="TinyInt")]
		public System.Nullable<byte> Report_VersionMinor
		{
			get
			{
				return this._Report_VersionMinor;
			}
			set
			{
				if ((this._Report_VersionMinor != value))
				{
					this.OnReport_VersionMinorChanging(value);
					this.SendPropertyChanging();
					this._Report_VersionMinor = value;
					this.SendPropertyChanged("Report_VersionMinor");
					this.OnReport_VersionMinorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_Generated", DbType="DateTime")]
		public System.Nullable<System.DateTime> Report_Generated
		{
			get
			{
				return this._Report_Generated;
			}
			set
			{
				if ((this._Report_Generated != value))
				{
					this.OnReport_GeneratedChanging(value);
					this.SendPropertyChanging();
					this._Report_Generated = value;
					this.SendPropertyChanged("Report_Generated");
					this.OnReport_GeneratedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comp_ReportInfo", Storage="_Comp", ThisKey="Report_Comp_ID_FK", OtherKey="Comp_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Comp Comp
		{
			get
			{
				return this._Comp.Entity;
			}
			set
			{
				Comp previousValue = this._Comp.Entity;
				if (((previousValue != value) 
							|| (this._Comp.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comp.Entity = null;
						previousValue.ReportInfos.Remove(this);
					}
					this._Comp.Entity = value;
					if ((value != null))
					{
						value.ReportInfos.Add(this);
						this._Report_Comp_ID_FK = value.Comp_ID;
					}
					else
					{
						this._Report_Comp_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Comp");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_ReportInfo", Storage="_Event", ThisKey="Report_Event_ID_FK", OtherKey="Event_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.ReportInfos.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.ReportInfos.Add(this);
						this._Report_Event_ID_FK = value.Event_ID;
					}
					else
					{
						this._Report_Event_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Offer_ReportInfo", Storage="_Offer", ThisKey="Report_Race_ID_FK", OtherKey="Offer_ID", IsForeignKey=true)]
		public Offer Offer
		{
			get
			{
				return this._Offer.Entity;
			}
			set
			{
				Offer previousValue = this._Offer.Entity;
				if (((previousValue != value) 
							|| (this._Offer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Offer.Entity = null;
						previousValue.ReportInfos.Remove(this);
					}
					this._Offer.Entity = value;
					if ((value != null))
					{
						value.ReportInfos.Add(this);
						this._Report_Race_ID_FK = value.Offer_ID;
					}
					else
					{
						this._Report_Race_ID_FK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Offer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
